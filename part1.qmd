---
title: "Part 1: Basic Modeling"
---

## Overview of `epiworldR`

![General Structure of `epiworldR`](figs/overview-of-epiworldr.drawio.svg){width="60%"}

As shown in the above diagram, the core component of an `epiworldR` simulation is the model object.
Models can have an arbitrary number of parameters, viruses, tools, and global events, depending on what the user wants to simulate.
Pre-built models in `epiworldR` (e.g., ModelSIR, ModelSEIR, ModelDiffNet) typically initialize with a single virus and a few other parameters, such as the population size.
All `epiworldR` models inherit the "epiworld_model" class, which gives them access to the following functions:
```{r showing-methods}
library(epiworldR)
methods(class = "epiworld_model")
```

In this part of the workshop, we'll use several of these functions as we walk through a basic modeling example for monkeypox.

## Example Scenario: Monkeypox Outbreak
The example implements the following scenario:

-   **Disease:** Monkeypox
-   **Population size:** 50,000 agents
-   **Initial Disease Prevalence:** 0.0001 (5 agents start the simulation exposed to the virus)
-   **Contact Rate:** 4 (each agent will contact 4 others during each model step/day)
-   **Incubation Days:** 7 (how long after infection before symptoms appear)
-   **Transmission Rate:** 0.5 (the probability an infected agent infects another agent)
-   **Recovery Rate:** $\frac{1}{7}$ (infected agents take 7 days to recover)

### Set Up the Model
Create the model with the above characteristics using the `ModelSEIRCONN()` function.
```{r}
#| label: setup-model
monkeypox_model <- ModelSEIRCONN(
  name              = "Monkeypox",
  n                 = 50000, 
  prevalence        = 0.0001, 
  contact_rate      = 4,
  incubation_days   = 7,
  transmission_rate = 0.5,
  recovery_rate     = 1/7
  )
```

### Run the Model

Execute the model using the `run()` function, passing the model object, the number of simulation days (in this case, 100 days), and an optional seed for reproducibility.
Use the `verbose_off()` function before running the model to suppress output generated by hte `run()` function.

::: {.callout-note collapse="true"}
## Connected vs Non-Connected Models

This example uses a SEIR connected model (`ModelSEIRCONN()`), meaning that all agents in the model are connected with each other. 
Non-connected models (e.g., `ModelSEIR()`, `ModelSIR()`) don't assume all agents are connected, thus a network of agents must be built using the `agents_smallworld()` function before running the model where:\
- n = number of agents\
- k = number of ties in the small world network\
- d = whether the graph is directed or not\
- p = probability of rewiring
:::

```{r}
#| label: run-model-100
verbose_off(monkeypox_model)
run(monkeypox_model, ndays = 100, seed = 1912)

monkeypox_model
```

After running the model, printing it gives the final distribution of agents across the four SEIR states.
If we want to re-run the model for a different duraction, `epiworldR` allows us to do this without re-initializing the model.

```{r}
#| label: run-model-60
run(monkeypox_model, ndays = 60, seed = 1912)
monkeypox_model
```

### Model Summary
For more detailed output than the simple print, use the `summary()` function:

```{r}
#| label: summary-model
summary(monkeypox_model)
```

The `summary()` function provides a lot more information on the model:

1. Summary of the simulation itself, giving details on the size of the model, the number of entities (think of these are public spaces in which agents can make contact with one another, we'll cover them later), the elapsed time for the simulation, etc.
2. List of global events.
The model automatically includes an event to update infected individuals, which runs on each day of the model.
During this event, infected agents contact other agents (with a chance to infect them) and/or recover from the disease.
Users can define additional events and specify when they run (e.g., daily, weekly, once after 20 days, when the number of infected agents crosses a certain threshold, etc.).
3. Lists of viruses and tools. 
Our example has 1 virus and 0 tools, but `epiworldR` models can have any number of viruses and tools.
4. List of model parameters given at initialization.
5. Initial and final distribution of agents across SEIR states.
6. Transition Probabilities Matrix, which shows the probability of an agent in one state moving to a different state at a given step of the model.
Notice that there is a probability of 0.0 to skip states.
In other words, an agent cannot move from Susceptible directly to Recovered; that agent must pass through the Infected state before progressing to Recovered. 
The same logic applies in the reverse direction; an agent cannot become Susceptible again after being Infected.

Take some time to familiarize yourself with this output.

### Model Visualization
```{r}
#| label: plot-model
plot(monkeypox_model)
```

The `plot()` function plots the number of agents in each of the four SEIR states over the course of the model simulation.
You can get this data in tabular form with the `get_hist_total()` function:

```{r}
#| label: get-hist-total
head(get_hist_total(monkeypox_model))
```

### Reproductive Number

An important statistic in epidemiological models is the [reproductive number](https://en.wikipedia.org/wiki/Basic_reproduction_number#Effective_reproduction_number).
We get this from an `epiworldR` model using the `get_reproductive_number()` function.

```{r}
#| label: get-repnum
repnum <- get_reproductive_number(monkeypox_model)
head(repnum)
```

TODO: Explanation of this output. Does every agent have an rt?

Plot the reproductive number using:
```{r}
#| label: plot-repnum
x <- plot(repnum, type="b")
```

This function takes the average of values in the above table for each date and repeats until all dates have been accounted for. 
For example, on average, individuals who acquired the virus on the 10th day transmit the virus to roughly 10 other individuals.


## Exercise 1

Create a SEIR model using the `ModelSEIR()` function (not `ModelSEIRCONN()`) to simulate a COVID-19 outbreak for 100 days in a population with:

-   **Population size:** 10,000 agents
-   **Initial Disease Prevalence:** 0.01
-   **Incubation Days:** 4
-   **Transmission Rate:** 0.9
-   **Recovery Rate:** $\frac{1}{4}$

Then plot the model parameters to analyze changes in counts over time. When running the model, set `seed = 1912`.

Since `ModelSEIR` is not connected, you will need to add a smallworld population using the `agents_smallworld()` function after initializing the model, using:

- n = 10000
- k = 5
- d = FALSE
- p = .01

From there, run the model and visualize.

After how many days does the number of infections peak in this simulation? How many infections occur at the peak?

```{r}
# Your solution here

```

## Exercise 2

Plot the reproductive number of the COVID-19 simulated SEIR model over 100 days.

```{r}
# Your solution here

```