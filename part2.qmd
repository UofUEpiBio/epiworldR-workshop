---
title: "Part 2: Adding Multiple Diseases & Tools"
---

epiworldR supports multi-variant models, the below code gives instructions on 
how to implement this. First, build a SIRCONN model for COVID-19, which new
viruses and tools will then be added to. 

## Adding Multiple Viruses & Variants

```{r design-and-add}
library(epiworldR)
model_sir <- ModelSIRCONN(
  name              = "COVID-19",
  n                 = 100000, 
  prevalence        = 0.0001, 
  contact_rate      = 2,
  prob_transmission = 0.5,
  prob_recovery     = 1/3
  )
run(model_sir, ndays = 50, seed = 1912)
model_sir
```

#### Designing the Virus

Using the `virus` function, assign a name the new virus/variant with its corresponding probability of infecting any given agent. In this example, prob_infecting = 0.3. In order to add this new virus to the model, use the `add_virus` function by calling the original epiworldR model object, the new virus, and the new virus' prevalence (which is set to 0.0001 in this example).

```{r}
# Building the virus
flu <- virus(name = "Flu", prob_infecting = .3)

# Adding the virus to the model
add_virus(model_sir, flu, .0001)
```

Next, run the updated model with the new virus for 50 days, the output below describes the simulation. To confirm that the flu is included, notice the presence of "Flu" in the Virus(es) section of the output. All other output is interpretable as specified in previous sections.

```{r}
run(model_sir, ndays = 50, seed = 1912)
model_sir
```

#### Plotting
Plotting the previous model (including the flu) yields the following. Notice the presence of two reproductive numbers plotted over time. Variant 0 refers to COVID-19 and variant 1 refers to the flu.

```{r, fig.height=10}
repnum2 <- get_reproductive_number(model_sir)

op <- par(mfrow = c(2,1))
plot(model_sir)
plot(repnum2, type="b")
par(op)
```

## Tools

Now, the implementation of tools to combat any viruses and variants in the model will be demonstrated. First, for simplicity, remove the flu virus from the SIR model object (keep in mind the index for the flu virus in the model object is 1). Next, provide parameters for the new tool using the "tool" function. These parameters include the name of the tool, any reduction in probabilities for the SIR model parameters, and increased probability of recovery option. In order to add the tool to the SIR model, use the `add_tool` function with the SIR model object, new tool, and prevalence of the tool. In this example, assume that 50% of the population will have received the vaccination.

```{r removing-virus}
# Removing the flu virus from the model
rm_virus(model_sir, 1)

vaccine <- tool(
  name = "Vaccine",
  susceptibility_reduction = .9,
  transmission_reduction = .5,
  recovery_enhancer = .5, 
  death_reduction = .9
)

add_tool(model_sir, vaccine, 0.5)
run(model_sir, ndays = 50, seed = 1231)
```

#### Plotting

```{r curves-including-vaccine, fig.height=10}
repnum3 <- get_reproductive_number(model_sir)

op <- par(mfrow = c(2,1))
plot(model_sir)
plot(repnum3, type="b")
par(op)
```
## Comorbidities Using Logit Functions

## Exercise 1
Using a SIR connected model to simulate the Flu for 75 days, add the Coronavirus 
Delta variant to the model. Then plot the model parameters and reproductive 
numbers over time for both viruses. Assume n = 10000, prevalence = 0.0001, 
contact_rate = 2.1, prob_transmission = 0.5, and prob_recovery = 1/4 for model 
initialization. Assume the Delta variant has a probability of infecting = 0.3 
with an initial prevalence = 0.0001.

:::{.callout-note collapse="true"}
## Solution
```{r, fig.height=10}
model_sir <- ModelSIRCONN(
  name              = "Flu",
  n                 = 10000, 
  prevalence        = 0.0001, 
  contact_rate      = 2.1,
  prob_transmission = 0.5,
  prob_recovery     = 1/4
  )

# Building the virus
delta <- virus(name = "Delta", prob_infecting = .3)

# Adding the virus to the model
add_virus(model_sir, delta, .0001)

# Run the model
run(model_sir, ndays = 75, seed = 1912)

# Reproductive number 
repnum <- get_reproductive_number(model_sir)

# Plotting
op <- par(mfrow = c(2,1))
plot(model_sir)
plot(repnum, type="b")
par(op)
```
:::

## Exercise 2
Using the SIR connected model from exercise 1 (model_sir), remove the Delta variant
from the model and add a masking tool called "mask_wearing" with transmission 
reduction = 0.3 and proportion of complying agents = 0.6. Simulate this 
scenario for 50 days and plot the model parameters and average reproductive number
over time. 

:::{.callout-tip collapse="true"}
Masking only influences transmission of a disease, thus transmission reduction 
= 0.3 and all other parameters of this tool will be 0.0. 
:::

:::{.callout-note collapse="true"}
## Solution
```{r, fig.height=10}
# Removing Delta variant
rm_virus(model_sir, 1)

# Creating a tool
mask_wearing <- tool(
  name = "Mask",
  susceptibility_reduction = 0.0,
  transmission_reduction   = 0.3, # Only transmission
  recovery_enhancer        = 0.0,
  death_reduction          = 0.0
)

# Adding tool to the model
add_tool(model_sir, mask_wearing, 0.6)

# Running the model
run(model_sir, ndays = 50, seed = 1231)

# Reproductive number
repnum2 <- get_reproductive_number(model_sir)

# Plotting
op <- par(mfrow = c(2,1))
plot(model_sir)
plot(repnum2, type="b")
par(op)
```
:::
