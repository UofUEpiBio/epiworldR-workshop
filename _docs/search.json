[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "epiworldR is a a flexible framework for Agent-Based Models (ABM), the epiworldR package provides methods for prototyping disease outbreaks and transmission models using a C++ backend, making it very fast. It supports multiple epidemiological models, including the Susceptible-Infected-Susceptible (SIS), Susceptible-Infected-Removed (SIR), Susceptible-Exposed-Infected-Removed (SEIR), and others, involving arbitrary mitigation policies and multiple-disease models. Users can specify infectiousness/susceptibility rates as a function of agents’ features, providing great complexity for the model dynamics. Furthermore, epiworldR is ideal for simulation studies featuring large populations."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "epiworldR",
    "section": "",
    "text": "This R package is a wrapper of the C++ library [epiworld](https://github.com/UofUEpi/epiworld). It provides a general framework for modeling disease transmission using agent-based models ([wiki](https://en.wikipedia.org/w/index.php?title=Agent-based_model&oldid=1153634802)). Some of the main features include: - Fast simulation with an average of 30 million agents/day per second. - One model can include multiple diseases. - Policies (tools) can be multiple and user-defined."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "epiworldR",
    "section": "Installation",
    "text": "Installation\nYou can install the development version of epiworldR from [GitHub](https://github.com/) with:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"UofUEpi/epiworldR\")"
  },
  {
    "objectID": "index.html#examples",
    "href": "index.html#examples",
    "title": "epiworldR",
    "section": "Examples",
    "text": "Examples\nThis R package includes several popular epidemiological models including SIS (wiki), SIR (wiki), and SEIR (wiki) using either a fully connected graph (similar to a compartmental model) or a user-defined network. Here are some examples:\n\nSIR Model Using a Random Graph\nThis Susceptible-Infected-Recovered model features a population of 100,000 agents simulated in a small-world network. Each agent is connected to ten other agents. One percent of the population has the virus, with a 70% chance of tranmission. Infected individuals recover at a 0.3 rate:\n\nlibrary(epiworldR)\n\n# Creating a SIR model\nsir <- ModelSIR(\n  name           = \"COVID-19\",\n  prevalence     = .01,\n  infectiousness = .7,\n  recovery       = .3\n  ) |>\n  # Adding a Small world population \n  agents_smallworld(n = 100000, k = 10, d = FALSE, p = .01) |>\n  # Running the model for 50 days\n  run(ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nsir\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Recovered (SIR)\nPopulation size     : 100000\nNumber of entities  : 0\nDays (duration)     : 50 (of 50)\nNumber of variants  : 1\nLast run elapsed t  : 330.00ms\nLast run speed      : 15.12 million agents x day / second\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 1.00%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Infectiousness    : 0.7000\n - Prob. of Recovery : 0.3000\n\nDistribution of the population at time 50:\n  - (0) Susceptible :  99000 -> 822\n  - (1) Infected    :   1000 -> 415\n  - (2) Recovered   :      0 -> 98763\n\nTransition Probabilities:\n - Susceptible  0.91  0.09  0.00\n - Infected     0.00  0.70  0.30\n - Recovered    0.00  0.00  1.00\n\n\nVisualizing the outputs\n\nplot(sir)\n\n\n\n\n\n\nSEIR Model With a Fully Connected Graph\n\nmodel_seirconn <- ModelSEIRCONN(\n  name                = \"COVID-19\",\n  prevalence          = 0.01, \n  n                   = 10000,\n  contact_rate        = 4, \n  incubation_days     = 7, \n  prob_transmission   = 0.6,\n  prob_recovery       = 0.5\n)\n\nset.seed(132)\nrun(model_seirconn, ndays = 100)\n\n_________________________________________________________________________\nRunning the model...\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\nmodel_seirconn\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Exposed-Infected-Removed (SEIR) (connected)\nPopulation size     : 10000\nNumber of entities  : 0\nDays (duration)     : 100 (of 100)\nNumber of variants  : 1\nLast run elapsed t  : 119.00ms\nLast run speed      : 8.39 million agents x day / second\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 1.00%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Avg. Incubation days : 7.0000\n - Contact rate         : 4.0000\n - Prob. Recovery       : 0.5000\n - Prob. Transmission   : 0.6000\n\nDistribution of the population at time 100:\n  - (0) Susceptible :  9900 -> 91\n  - (1) Exposed     :   100 -> 0\n  - (2) Infected    :     0 -> 0\n  - (3) Recovered   :     0 -> 9909\n\nTransition Probabilities:\n - Susceptible  0.96  0.04  0.00  0.00\n - Exposed      0.00  0.85  0.15  0.00\n - Infected     0.00  0.00  0.49  0.51\n - Recovered    0.00  0.00  0.00  1.00\n\n\nComputing some key statistics: plotting and reproductive number (wiki)\n\nplot(model_seirconn)\n\n\n\nrepnum <- get_reproductive_number(model_seirconn)\nplot(repnum, type = \"b\")\n\n\n\n\n\n\nSIR Logit\n\nset.seed(2223)\nn <- 100000\n\nX <- cbind(\n  Intercept = 1,\n  Female    = sample.int(2, n, replace = TRUE) - 1\n  )\n\ncoef_infect  <- c(.1, -2, 2)\ncoef_recover <- rnorm(2)\n\nmodel_logit <- ModelSIRLogit(\n  \"covid2\",\n  data = X,\n  coefs_infect      = coef_infect,\n  coefs_recover     = coef_recover, \n  coef_infect_cols  = 1L:ncol(X),\n  coef_recover_cols = 1L:ncol(X),\n  prob_infection = .8,\n  prob_recovery = .3,\n  prevalence = .01\n)\n\nagents_smallworld(model_logit, n, 8, FALSE, .01)\n\nrun(model_logit, 50)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nplot(model_logit)\n\n\n\n# Females are supposed to be more likely to become infected\nrn <- get_reproductive_number(model_logit)\n\n(table(\n  X[, \"Female\"],\n  (1:n %in% rn$source)\n) |> prop.table())[,2]\n\n      0       1 \n0.12984 0.14201 \n\n# Looking into the agents\nget_agents(model_logit)\n\nAgents from the model \"Susceptible-Infected-Removed (SIR) (logit)\":\nAgent: 0, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 1, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 2, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 3, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 4, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 5, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 6, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 7, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 8, state: Susceptible (0), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 9, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\n... 99990 more agents ...\n\n\n\n\nTransmission Network\n\nsir <- ModelSIR(\n  name           = \"COVID-19\",\n  prevalence     = .01,\n  infectiousness = .5,\n  recovery       = .5\n  ) |>\n    # Adding a Small world population \n    agents_smallworld(n = 500, k = 10, d = FALSE, p = .01) |>\n    # Running the model for 50 days\n    run(ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\n# Transmission network\nnet <- get_transmissions(sir)\n\n# Plotting\nlibrary(netplot)\nlibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following object is masked from 'package:netplot':\n\n    ego\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\nx <- graph_from_edgelist(as.matrix(net[,2:3]) + 1)\n\nnplot(x, edge.curvature = 0, edge.color = \"gray\", skip.vertex=TRUE)\n\n\n\n\n\n\nMultiple Simulations\n\nmodel_sir <- ModelSIRCONN(\n  name = \"COVID-19\",\n  prevalence = 0.01,\n  n = 1000,\n  contact_rate = 2,\n  prob_transmission = 0.9, prob_recovery = 0.1\n  )\n\n# Generating a saver\nsaver <- make_saver(\"total_hist\", \"reproductive\")\n\n# Running and printing\nrun_multiple(model_sir, ndays = 100, nsims = 50, saver = saver, nthread = 2)\n\nStarting multiple runs (50) using 2 thread(s)\n_________________________________________________________________________\n_________________________________________________________________________\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\n# Retrieving the results\nans <- run_multiple_get_results(model_sir)\n\nhead(ans$total_hist)\n\n  sim_num thread date nvariants       state counts\n1       1      0    0         1 Susceptible    990\n2       1      0    0         1    Infected     10\n3       1      0    0         1   Recovered      0\n4       1      0    1         1 Susceptible    974\n5       1      0    1         1    Infected     25\n6       1      0    1         1   Recovered      1\n\nhead(ans$reproductive)\n\n  sim_num thread variant source source_exposure_date rt\n1       1      0       0    527                   10  0\n2       1      0       0    835                   10  0\n3       1      0       0    189                    9  0\n4       1      0       0    192                    9  0\n5       1      0       0    612                    9  0\n6       1      0       0    977                    9  0\n\nplot(ans$reproductive)"
  },
  {
    "objectID": "part1.html",
    "href": "part1.html",
    "title": "Part 1: Basic Modeling",
    "section": "",
    "text": "epiworldR is an R package that provides a fast (C++ backend) and highly-customizable framework for building network-based transmission/diffusion agent-based models [ABM]. Some key features of epiworldR are the ability to construct multi-disease models (e.g., models of competing multi-pathogens/multi-rumor,) design mutating pathogens, architect population-level interventions, and build models with an arbitrary number of compartments/states (beyond SIR/SEIR.)"
  },
  {
    "objectID": "part1.html#example-1-simulating-an-sir-model",
    "href": "part1.html#example-1-simulating-an-sir-model",
    "title": "Part 1: Basic Modeling",
    "section": "Example 1: Simulating an SIR model",
    "text": "Example 1: Simulating an SIR model\n\nSetup and running the model\nThis example implements a social network with parameters listed within the\nModelSIRCONN function. The disease name is specified (COVID-19), 100000 agents are initialized, disease prevalence of 0.001 is declared, each agent will contact two others (contact_rate), probability of transmitting the disease for any given agent is 0.3, and probability of recovery is set to \\(\\frac{1}{3}\\).To create this model on epiworldR, simply use the ModelSIRCONN function. From here, the example will take you through the basic features of epiworldR.\n\nlibrary(epiworldR)\nmodel_sir <- ModelSIRCONN(\n  name              = \"COVID-19\",\n  n                 = 100000, \n  prevalence        = 0.0001, \n  contact_rate      = 2,\n  prob_transmission = 0.5,\n  prob_recovery     = 1/3\n  )\n\nPrinting the model shows us some information. First, the name of the model, population size, number of entities (think of these as public spaces in which agents can make social contact with one another), the duration in days, number of variants, amount of time the last replicate took to run (last run elapsed t), and rewiring status (on or off). The next piece of information you will see is a list of the viruses used in the model. In this case, COVID-19 was the only disease used. Note that epiworldR has the capability to include more than one virus in a model. Tool(s) lists any tools that agents have to fight the virus. Examples ofthis may include masking, vaccines, social distancing, etc. In this model, no tools are specified. Lastly, the model parameters are listed, which originate from the parameters specified in the model.\n\nmodel_sir\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Removed (SIR) (connected)\nPopulation size     : 100000\nNumber of entities  : 0\nDays (duration)     : 0 (of 0)\nNumber of variants  : 1\nLast run elapsed t  : -\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 0.01%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Contact rate       : 2.0000\n - Prob. Recovery     : 0.3333\n - Prob. Transmission : 0.5000\n\n\nTo execute the model, use the run function with the SIR model object, number of simulation days, and an optional seed for reproducibility. Next, print out the results from the simulated model using model_sir.\n\nrun(model_sir, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nmodel_sir\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Removed (SIR) (connected)\nPopulation size     : 100000\nNumber of entities  : 0\nDays (duration)     : 50 (of 50)\nNumber of variants  : 1\nLast run elapsed t  : 1.00s\nLast run speed      : 4.03 million agents x day / second\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 0.01%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Contact rate       : 2.0000\n - Prob. Recovery     : 0.3333\n - Prob. Transmission : 0.5000\n\nDistribution of the population at time 50:\n  - (0) Susceptible :  99990 -> 6514\n  - (1) Infected    :     10 -> 3\n  - (2) Recovered   :      0 -> 93483\n\nTransition Probabilities:\n - Susceptible  0.95  0.05  0.00\n - Infected     0.00  0.67  0.33\n - Recovered    0.00  0.00  1.00\n\n\nThere are two additional sections in the model summary after running the model object, the first being the distribution of the population at time 50. This section describes the flow of agents from each state (SIR) after 50 days. In the example, you’ll see the number of agents in the susceptible state decreasedfrom 99900 to 26456, the number of agents in the infected state increased from 100 to 501, and the number of recovered agents increased to 73043 after 50 days. The counts for these states will of course, change based on model parameters or simulation run-time. The transmission probabilities section outputs a 3x3 matrixthat describes the probability of moving from one state to another. For example, in the susceptible row, each agent has a 0.97 probability of remaining in the susceptible state with a 0.03 probability of moving from the susceptible state to the infected state. Notice in all cases, there is a probability of 0 to skip states. In other words, it is impossible for an agent to jump from the susceptible state to the recovered state; that agent must pass through the infected state in order to then progress to the recovered state. The same logicapplies with moving backwards; an agent cannot become susceptible again after being infected.\n\n\nExtracting information\nAfter running the epiworldR model, below is a list of all the functions that can be called using the epiworldR model object. To demonstrate, start with the basic plot and get_hist_total functions.\n\nmethods(class = \"epiworld_model\")\n\n [1] add_tool_n                 add_tool                  \n [3] add_virus_n                add_virus                 \n [5] agents_from_edgelist       agents_smallworld         \n [7] get_hist_tool              get_hist_total            \n [9] get_hist_transition_matrix get_hist_variant          \n[11] get_n_replicates           get_n_tools               \n[13] get_n_variants             get_name                  \n[15] get_ndays                  get_param                 \n[17] get_reproductive_number    get_states                \n[19] get_transition_probability print                     \n[21] queuing_off                queuing_on                \n[23] run_multiple               run                       \n[25] set_name                   set_param                 \n[27] size                       verbose_off               \n[29] verbose_on                \nsee '?methods' for accessing help and source code\n\n\n\n\nPlot\n\nplot(model_sir)\n\n\n\n\nAs evident from the above plot, the SIR model constructed from epiworldR displays the changes in susceptible, infected, and recovered case counts over time (days). Notice after a certain amount of time, the curves flatten. Below, a table representation of the above plot is printed, complete with each state within the SIR model, date, and agent counts.\n\nhead(get_hist_total(model_sir))\n\n  date       state counts\n1    0 Susceptible  99990\n2    0    Infected     10\n3    0   Recovered      0\n4    1 Susceptible  99981\n5    1    Infected     16\n6    1   Recovered      3\n\n\nAn important statistic in epidemiological models is the reproductive number.\n\nrepnum <- get_reproductive_number(model_sir)\nhead(repnum)\n\n  variant source source_exposure_date rt\n1       0  29130                   48  0\n2       0  29680                   46  0\n3       0  37567                   46  1\n4       0  78064                   46  1\n5       0  34389                   45  1\n6       0  26244                   43  0\n\n\nepiworldR has a method to automatically plot the reproductive number. Thisfunction takes the average of values in the above table for each date and repeats until all date have been accounted for. For example, on average, individuals who acquired the virus on the 10th day transmit the virus to roughly 1.7 other individuals.\n\nx <- plot(repnum, type=\"b\")"
  },
  {
    "objectID": "part2.html",
    "href": "part2.html",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "",
    "text": "epiworldR supports multi-variant models, the below code gives instructions on how to implement this. Using the “virus” function, give a name to the new virus/variant with its corresponding probability of infecting any given agent. In this example, prob_infecting is set to 1.0 as the flu is very contagious. In order to officially add this new virus to the model, use the “add_virus” function by calling the original epiworldR model object, the new virus, and the new virus’ prevalence (which is set to 0.01 in this example)."
  },
  {
    "objectID": "part2.html#adding-more-viruses-variants",
    "href": "part2.html#adding-more-viruses-variants",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Adding More Viruses & Variants",
    "text": "Adding More Viruses & Variants\n\nlibrary(epiworldR)\nmodel_sir <- ModelSIRCONN(\n  name              = \"COVID-19\",\n  n                 = 100000, \n  prevalence        = 0.0001, \n  contact_rate      = 2,\n  prob_transmission = 0.5,\n  prob_recovery     = 1/3\n  )\nrun(model_sir, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nmodel_sir\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Removed (SIR) (connected)\nPopulation size     : 100000\nNumber of entities  : 0\nDays (duration)     : 50 (of 50)\nNumber of variants  : 1\nLast run elapsed t  : 1.00s\nLast run speed      : 4.06 million agents x day / second\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 0.01%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Contact rate       : 2.0000\n - Prob. Recovery     : 0.3333\n - Prob. Transmission : 0.5000\n\nDistribution of the population at time 50:\n  - (0) Susceptible :  99990 -> 6514\n  - (1) Infected    :     10 -> 3\n  - (2) Recovered   :      0 -> 93483\n\nTransition Probabilities:\n - Susceptible  0.95  0.05  0.00\n - Infected     0.00  0.67  0.33\n - Recovered    0.00  0.00  1.00\n\n# Building the virus\nflu <- virus(name = \"Flu\", prob_infecting = .3)\n\n# Adding the virus to the model\nadd_virus(model_sir, flu, .0001)\n\nAfter running the updated model with the new virus included for 50 days, the output below describes the simulation. To confirm that the flu is included, notice the presence of “Flu” in the Virus(es) section of the output. All other output is interpretable as specified in previous sections.\n\nrun(model_sir, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nmodel_sir\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Removed (SIR) (connected)\nPopulation size     : 100000\nNumber of entities  : 0\nDays (duration)     : 50 (of 50)\nNumber of variants  : 2\nLast run elapsed t  : 1.00s\nTotal elapsed t     : 2.00s (2 runs)\nLast run speed      : 3.99 million agents x day / second\nAverage run speed   : 4.03 million agents x day / second\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 0.01%)\n - Flu (baseline prevalence: 0.01%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Contact rate       : 2.0000\n - Prob. Recovery     : 0.3333\n - Prob. Transmission : 0.5000\n\nDistribution of the population at time 50:\n  - (0) Susceptible :  99980 -> 6488\n  - (1) Infected    :     20 -> 8\n  - (2) Recovered   :      0 -> 93504\n\nTransition Probabilities:\n - Susceptible  0.95  0.05  0.00\n - Infected     0.00  0.66  0.34\n - Recovered    0.00  0.00  1.00\n\n\nPlotting the previous model (including the flu) yields the following. Notice the presence of two reproductive numbers plotted over time. Variant 0 refers to COVID-19 and variant 1 refers to the flu.\n\nrepnum2 <- get_reproductive_number(model_sir)\n\nop <- par(mfrow = c(2,1))\nplot(model_sir)\nplot(repnum2, type=\"b\")\n\n\n\npar(op)"
  },
  {
    "objectID": "part2.html#tools",
    "href": "part2.html#tools",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Tools",
    "text": "Tools\nNow, the implementation of tools to combat any viruses and variants in the model will be demonstrated. First, for the sake of simplicity, remove the flu virus from the SIR model object (keep in mind the index for the flu virus in the model object is 1). Next, provide parameters for the new tool using the “tool” function. These parameters include the name of the tool, any reduction in probabilities for the SIR model parameters, and increased probability of recovery option. In order to add the tool to the SIR model, use the “add_tool”function with the SIR model object, new tool, and prevalence of the tool. In this example, assume that 85% of the population will have received the vaccination.\n\n# Removing the flu virus from the model\nrm_virus(model_sir, 1)\n\nvaccine <- tool(\n  name = \"Vaccine\",\n  susceptibility_reduction = .9,\n  transmission_reduction = .5,\n  recovery_enhancer = .5, \n  death_reduction = .9\n)\n\nadd_tool(model_sir, vaccine, 0.5)\nrun(model_sir, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\n\n\nrepnum3 <- get_reproductive_number(model_sir)\n\nop <- par(mfrow = c(2,1))\nplot(model_sir)\nplot(repnum3, type=\"b\")\n\n\n\npar(op)"
  },
  {
    "objectID": "part3.html",
    "href": "part3.html",
    "title": "Part 3: Multiple Runs",
    "section": "",
    "text": "The purpose of the “run_multiple” function is to run a specified number of simulations using the same model object. That is, this function makes it possible to compare model results across several separate and repeated simulation"
  },
  {
    "objectID": "part3.html#example-simulating-a-seirconn-model-50-times",
    "href": "part3.html#example-simulating-a-seirconn-model-50-times",
    "title": "Part 3: Multiple Runs",
    "section": "Example: Simulating a SEIRCONN Model 50 Times",
    "text": "Example: Simulating a SEIRCONN Model 50 Times\n\nSetup and Running Model\nTo use the “run_multiple” function in epiworld, create your epimodel of choice; in this case, the example uses a SEIRCONN model for COVID-19, 100000 people, an initial prevalence of 0.0001 (0.01%), a contact rate of 2, probability of transmission 0.5, a total of 7 incubation days, and probability of recovery \\(\\frac{1}{3}\\).\n\nlibrary(epiworldR)\nmodel_seirconn <- ModelSEIRCONN(\n  name              = \"COVID-19\",\n  n                 = 10000, \n  prevalence        = 0.0001, \n  contact_rate      = 2,\n  prob_transmission = 0.5,\n  incubation_days   = 7,\n  prob_recovery     = 1/3\n  )\n\n\n\nGenerating a Saver\nNext, generate a saver for the purpose of extracting the “total_hist” and “reproductive” information from the model object. Keep in mind that you can generate a saver for any metric compatible with the “make_saver” function. Now, use the “run_multiple” function with the model object, number of desired days to run the simulation, number of simulations to run, and number of threads for parallel computing.\n\n# Generating a saver\nsaver <- make_saver(\"total_hist\", \"reproductive\")\n# Running and printing\nrun_multiple(model_seirconn, ndays = 50, nsims = 50, saver = saver, nthread = 2)\n\nStarting multiple runs (50) using 2 thread(s)\n_________________________________________________________________________\n_________________________________________________________________________\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\n\nUsing the “run_multiple_get_results” function, extract the results from the model object that was simulated 50 times for comparison across simulations.\n\n# Retrieving the results\nans <- run_multiple_get_results(model_seirconn)\nhead(ans$total_hist)\n\n  sim_num thread date nvariants       state counts\n1       1      0    0         1 Susceptible   9999\n2       1      0    0         1     Exposed      1\n3       1      0    0         1    Infected      0\n4       1      0    0         1   Recovered      0\n5       1      0    1         1 Susceptible   9999\n6       1      0    1         1     Exposed      0\n\nhead(ans$reproductive)\n\n  sim_num thread variant source source_exposure_date rt\n1       1      0       0   1335                    2  0\n2       1      0       0   7893                    0  1\n3       2      0       0    132                   50  0\n4       2      0       0    317                   50  0\n5       2      0       0    455                   50  0\n6       2      0       0    502                   50  0\n\n\n\n\nPlotting\nTo plot the epicurves and reproductive numbers over time using boxplots, extract the results from the model object using “run_multiple_get_results”. For this example, the dates are filtered to be less than or equal to 20 to observe the epicurves in the first 20 days. Notice each boxplot in the below table represents the observed values from each of the 50 simulations for each date.\n\nseirconn_50 <- run_multiple_get_results(model_seirconn)$total_hist\nseirconn_50 <- seirconn_50[seirconn_50$date <= 20,]\nplot(seirconn_50)\n\n\n\n\nTo view the a plot of the reproductive number over all 50 days for each of the 50 simulations, store the reproductive results to a new object using “run_multiple_get_results”, then plot using the “boxplot” function. Notice each source exposure date displays a boxplot representing the distribution of reproductive numbers across all 50 simulations. As expected, the reproductive number on average, decreases over time.\n\nseirconn_50_r <- run_multiple_get_results(model_seirconn)$reproductive\nplot(seirconn_50_r)"
  },
  {
    "objectID": "build.html",
    "href": "build.html",
    "title": "epiworldR",
    "section": "",
    "text": "To build the website from the command line: - Type: quarto preview . - To ensure that git is installed: module load quarto"
  },
  {
    "objectID": "part3.html#exercise-1",
    "href": "part3.html#exercise-1",
    "title": "Part 3: Multiple Runs",
    "section": "Exercise 1",
    "text": "Exercise 1\nConsider for this exercise that there is a flu outbreak. Your goal is to observe the average reproductive number over 100 simulations. Using a run-multiple simulation, what is the average reproductive number over the course of the first 20 days? Use a SEIRCONN model with n = 10000, prevalence = 0.01, contact_rate = 2, prob_transmission = 0.5, incubation_days = 2, and prob_recovery = \\(\\frac{1}{7}\\).\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\nflowchart LR\n  A[Create epiworldR_model] --> B(Generate saver)\n  B --> C(Run epiworldR_model)\n  C --> D(Plot average reproductive number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nmodel_seirconn <- ModelSEIRCONN(\n  name              = \"Flu\",\n  n                 = 10000, \n  prevalence        = 0.01, \n  contact_rate      = 2,\n  prob_transmission = 0.5,\n  incubation_days   = 2,\n  prob_recovery     = 1/7\n)\n\n# Generating a saver\nsaver <- make_saver(\"reproductive\")\n\n# Running and printing\nrun_multiple(model_seirconn, ndays = 20, nsims = 100, saver = saver, nthread = 2)\n\nStarting multiple runs (100) using 2 thread(s)\n_________________________________________________________________________\n_________________________________________________________________________\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\n# Plotting\nseirconn_100_r <- run_multiple_get_results(model_seirconn)$reproductive\nplot(seirconn_100_r)"
  },
  {
    "objectID": "part3.html#exercise-2",
    "href": "part3.html#exercise-2",
    "title": "Part 3: Multiple Runs",
    "section": "Exercise 2",
    "text": "Exercise 2\nSimulate a vaccine intervention for the previous exercise’s Flu virus where 50% of individuals in the population will receive the vaccine on day 10. How then, does the average reproductive number behave over 20 days and 100 simulations? Assume the following parameters: susceptibility_reduction = .9, transmission_reduction = .5, recovery_enhancer = .5, and death_reduction = .9.\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\nflowchart LR\n  A[Create tool] --> B(Use `globalaction_tool` & `add_global_action`)\n  B --> C(Generate saver & run-multiple)\n  C --> D(Plot average reproductive number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Creating a tool\nepitool <- tool(\n  name = \"Vaccine\",\n  susceptibility_reduction = .9,\n  transmission_reduction = .5,\n  recovery_enhancer = .5, \n  death_reduction = .9\n)\n\n# Adding a global action\nvaccine_day_10 <- globalaction_tool(epitool, .5, day = 10)\nadd_global_action(model_seirconn, vaccine_day_10)\n\n# Generating a saver\nsaver_2 <- make_saver(\"reproductive\")\n# Running and printing\nrun_multiple(model_seirconn, ndays = 20, nsims = 100, saver = saver_2, \n             nthread = 2)\n\nStarting multiple runs (100) using 2 thread(s)\n_________________________________________________________________________\n_________________________________________________________________________\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\n# Plotting\nseirconn_100_r2 <- run_multiple_get_results(model_seirconn)$reproductive\nplot(seirconn_100_r2)"
  }
]