---
title: "Part 2b: Advanced Modeling - Multiple Diseases, Tools, and Events"
---

As mentioned in Part 1, `epiworldR` models can have multiple viruses, tools, and events. In this part of the workshop, we'll walk through an example of an advanced model with multiple interacting pieces.

## Example Scenario: Simultaneous COVID-19 and Flu Outbreaks

The example implements the following scenario:

-   **Diseases:** COVID-19 and Flu
-   **Population size:** 50,000 agents
-   **Contact Rate:** 4
-   **Recovery Rate:** $\frac{1}{4}$ (same for both diseases)
-   *COVID-19 Parameters*
    -   **Initial Prevalence:** 0.001
    -   **Transmission Rate:** 0.5
-   *Flu Parameters*
    -   **Initial Prevalence:** 0.001
    -   **Transmission Rate:** 0.35

We'll go through the process step-by-step. After each step, we'll run the model for 50 days and plot it to illustrate how each added component changes the base model.

### Set up the Model

We start with a `ModelSIRCONN` model for COVID-19. We'll add the flu virus and our tools and events to this base model.

```{r}
#| label: create-base-model
library(epiworldR)

model_sirconn <- ModelSIRCONN(
  name              = "COVID-19",
  n                 = 50000, 
  contact_rate      = 4,
  recovery_rate     = 1/4,
  prevalence        = 0.001,
  transmission_rate = 0.5
  )
```

```{r}
#| label: run-base-model
verbose_off(model_sirconn)
run(model_sirconn, ndays = 50, seed = 1912)
plot(model_sirconn)
```

### Add the Flu Virus

Create the second virus using the `virus()` function. The parameter `prob_infecting` is the transmission rate. The parameter `as_proportion` tells the function to interpret the prevalence as a proportion of the population, rather than a fixed value.

```{r}
#| label: create-flu-virus
flu_virus <- virus(name = "Flu", prob_infecting = .35, prevalence = 0.001, as_proportion = TRUE)
```

Add the virus to the model with the `add_virus()` function.

```{r}
#| label: add-flu
add_virus(model_sirconn, flu_virus)
```

```{r}
#| label: run-model-flu
run(model_sirconn, ndays = 50, seed = 1912)
plot(model_sirconn)
```

### Add a Tool (Vaccine)

In `epiworldR`, agents use tools to fight diseases. Create the vaccine tool using the `tool()` function, with parameters that indicate how the tool modifies the disease parameters. We set our vaccine to reduce the susceptibility of agents by 10%, the transmission rate of infected agents by 50%, and the death rate by 10%. The vaccine further enhances the recovery rate by 50%.

```{r}
#| label: create-vaccine
vaccine_tool <- tool(
  name = "Vaccine",
  susceptibility_reduction = .9,
  transmission_reduction = .5,
  recovery_enhancer = .5, 
  death_reduction = .9,
  prevalence = 0.5, # TODO: is this the same as set_distribution_tool()? If so, use this instead and note it above.
  as_proportion = TRUE
)
```

Use the `set_distribution_tool()` function to define the proportion of the population to receive the tool (set here to 50%).

```{r}
#| label: set-vaccine-distribution
set_distribution_tool(
  tool = vaccine_tool,
  distfun = distribute_tool_randomly(0.5, TRUE)
)
```

Add the vaccine to the model using the `add_tool()` function.

```{r}
#| label: add-vaccine
add_tool(model_sirconn, vaccine_tool)
```

```{r}
#| label: run-model-vaccine
run(model_sirconn, ndays = 50, seed = 1912)
plot(model_sirconn)
```

Note how the vaccine severely limits the number of infected agents.

### Add Events

In `epiworldR`, all models automatically have a global event that runs each day to update the agents. For this example, we'll add two additional events that represent public health interventions that start partway through the simulation as the dual-disease outbreak begins to gain traction:

-   Beginning on Day 10, a policy of social isolation is adopted which reduces the contact rate to 2
-   Beginning on Day 20, a TV advertisement is run increasing awareness of the outbreak, reducing the contact rate further to 1.5

Create these events using the `globalevent_set_params()` function, specifying the day to run the event.

```{r}
#| label: set-events
isolation_day_10 <- globalevent_set_params("Contact rate", 2, day = 10)
advertisement_day_20 <- globalevent_set_params("Contact rate", 1.5, day = 20)
```

Add the events to the model with the `add_globalevent()` function.

```{r}
#| label: add-events
add_globalevent(model_sirconn, isolation_day_10)
add_globalevent(model_sirconn, advertisement_day_20)
```

```{r}
#| label: run-full-model
run(model_sirconn, ndays = 50, seed = 1912)
plot(model_sirconn)
```

Note the sharp change to the infected curve corresponding to adoptiong of the social isolation policy.

### Full Model Summary

With our advanced model complete, we can view the summary, noting the events, viruses, and tools we added to the model.

```{r}
#| label: model-summary
summary(model_sirconn)
```

### Reproductive Numbers

The model computes two reproductive numbers, one for each virus.

```{r}
#| label: reproductive-numbers
repnum2 <- get_reproductive_number(model_sirconn)
plot(repnum2, type="b")
```

## Example Scenario 2: Comorbidities Using Logit Functions

Often, we want to model the effects of comorbidities on the disease. For example, we may want to model the effects of obesity on the probability of recovery from COVID-19. To do this, we can use the `virus_fun_logit()` function to model the probability of recovery.

The steps are the following:

1.  Create the model

2.  Assign the agents' data (a matrix with covariates/features) to the model.

3.  Create a function to model the probability of recovery using the `virus_fun_logit()` function.

4.  Add the function to the virus' recovery rate using `set_prob_recovery_fun()`.

5.  Run the model.

We start by creating two matching models, one with comorbidities and one without.

```{r}
# With comorbidities
model_comor <- ModelSEIRCONN(
  name              = "Flu",
  n                 = 10000, 
  prevalence        = 0.001, 
  contact_rate      = 2.1,
  transmission_rate = 0.5,
  incubation_days   = 7,
  recovery_rate     = 1/4
  )

# Without comorbidities
model_no_comor <- ModelSEIRCONN(
  name              = "Flu",
  n                 = 10000, 
  prevalence        = 0.001, 
  contact_rate      = 2.1,
  transmission_rate = 0.5,
  incubation_days   = 7,
  recovery_rate     = 1/4
  )
```

Next, we will create a matrix with the agents' data. As an example, we will create a matrix with two columns, one for the baseline and one for obesity.

```{r}
# Artificial population with obesity
X <- readRDS("part2b_comorb.rds")
```

Let's now link agents' data to the model. This will allow us to use the data to model the probability of recovery.

```{r}
# Adding the data to the model
set_agents_data(model_comor, X)
model_comor
```

We then use `virus_fun_logit()` to create a function we can use to model the probability of recovery. The function takes in the following arguments:

-   `vars`: the variables to use in the model
-   `coefs`: the coefficients for each variable
-   `model`: the model object

```{r}
# Logit function 
lfun <- virus_fun_logit(
  vars  = 0:1,
  coefs = c(-1.0986, -0.8472), 
  model_comor
  )

# Printing
lfun
```

::: callout-note
To build the previous model, we used the following: (a) Under the logit model, the coefficient needed for the baseline probability of 0.25 is computed using `qlogis(0.25)`. With that, we can go further and compute the associated coefficient to obese individuals with `plogis(qlogis(.25) + x) = .125` -\> `qlogis(.25) + x = plogis(.125)` -\> `x = qlogis(.125) - qlogis(.25)`
:::

The next step is to set the probability of recovery function for the virus. We can do this using the `set_prob_recovery_fun()` function:

```{r}
# Setting the probability of recovery
set_prob_recovery_fun(
  virus = get_virus(model_comor, 0), 
  model = model_comor,
  vfun  = lfun
  )
```

We are now ready to run the model.

```{r}
run(model_comor, ndays = 50, seed = 1231)
run(model_no_comor, ndays = 50, seed = 1231)
```

And see the result

```{r}
#| label: curves-comorbidities
op <- par(mfrow = c(1, 2), cex = .7)
plot_incidence(model_comor, main = "With comorbidities")
plot_incidence(model_no_comor, main = "Without comorbidities")
par(op)
```

::: callout-tip
We can get information about agents' final state using the function `get_agents_state()`.
:::

## Exercise

Using a `SIRCONN` model to simulate the Flu for 75 days, add the Coronavirus Delta variant and a masking tool to the model. Then plot the model parameters and reproductive numbers over time.

Assume the following for model initialization:\
- n = 10000\
- prevalence = 0.001\
- contact_rate = 2.1\
- transmission_rate = 0.5\
- recovery_rate = $\frac{1}{4}$

Assume the Delta variant has:\
- prob_infecting = 0.3\
- recovery_rate = $\frac{1}{4}$\
- prevalence = 0.001\
- When running the model, use seed = 1912

Assume the masking tool has:\
- transmission_reduction = 0.3\
- proportion of complying agents = 0.6 (for adding the tool to the model)

After how many days does the number of infections peak in this simulation? How many infections occur at the peak?

::: {.callout-tip collapse="true"}
Masking only influences the transmission of a disease, thus transmission reduction = 0.3, and all other parameters of this tool will be 0.0.
:::

```{r}
# Your solution here

```

## TODO: Monkeypox Example from Part 1 (with events)

```{r}
#| label: plot-model
# # Plot the model
# # - Set graphical parameters to plot in 2x2 grid
# op <- par(mfrow = c(2,2))
# # - Plot
# plot_incidence(model_seirconn)
# abline(v = 20, col = "steelblue", lwd = 2, lty = 2)

# plot_reproductive_number(model_seirconn)
# abline(v = 20, col = "steelblue", lwd = 2, lty = 2)

# plot_generation_time(model_seirconn)
# abline(v = 20, col = "steelblue", lwd = 2, lty = 2)
# # - Restore original graphical parameters
# par(op)
```
