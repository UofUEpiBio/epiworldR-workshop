---
title: "Part 2b: Advanced Modeling - Multiple Diseases, Tools, and Events"
---

As mentioned in Part 1, `epiworldR` models can have multiple viruses, tools, and events. In this part of the workshop, we'll walk through an example of an advanced model with multiple interacting pieces. We'll then look at an example of modeling comorbidities.

## Example Scenario 1: Simultaneous COVID-19 and Flu Outbreaks

The example implements the following scenario:

-   **Diseases:** COVID-19 and Flu
-   **Population size:** 50,000 agents
-   **Contact Rate:** 4
-   **Recovery Rate:** $\frac{1}{4}$ (same for both diseases)
-   *COVID-19 Parameters*
    -   **Initial Prevalence:** 0.001
    -   **Transmission Rate:** 0.5
-   *Flu Parameters*
    -   **Initial Prevalence:** 0.001
    -   **Transmission Rate:** 0.35

We'll go through the process step-by-step. After each step, we'll run the model for 50 days and plot it to illustrate how each added component changes the base model.

### Set Up the Model

We start with a `ModelSIRCONN` model for COVID-19. We'll add the flu virus and our tools and events to this base model.

```{r}
#| label: create-base-model
library(epiworldR)

model_sirconn <- ModelSIRCONN(
  name              = "COVID-19",
  n                 = 50000, 
  contact_rate      = 4,
  recovery_rate     = 1/4,
  prevalence        = 0.001,
  transmission_rate = 0.5
  )
```

```{r}
#| label: run-base-model
verbose_off(model_sirconn)
run(model_sirconn, ndays = 50, seed = 1912)
plot(model_sirconn)
```

### Add the Flu Virus

Create the second virus using the `virus()` function. The parameter `prob_infecting` is the transmission rate. The parameter `as_proportion` tells the function to interpret the prevalence as a proportion of the population, rather than a fixed value.

```{r}
#| label: create-flu-virus
flu_virus <- virus(name = "Flu", prob_infecting = .35, prevalence = 0.001, as_proportion = TRUE)
```

Add the virus to the model with the `add_virus()` function.

```{r}
#| label: add-flu
add_virus(model_sirconn, flu_virus)
```

```{r}
#| label: run-model-flu
run(model_sirconn, ndays = 50, seed = 1912)
plot(model_sirconn)
```

### Add a Tool (Vaccine)

In `epiworldR`, agents use tools to fight diseases. Create the vaccine tool using the `tool()` function, with parameters that indicate how the tool modifies the disease parameters. We set our vaccine to reduce the susceptibility of agents by 10%, the transmission rate of infected agents by 50%, and the death rate by 10%. The vaccine further enhances the recovery rate by 50%.

```{r}
#| label: create-vaccine
vaccine_tool <- tool(
  name = "Vaccine",
  susceptibility_reduction = .9,
  transmission_reduction = .5,
  recovery_enhancer = .5, 
  death_reduction = .9,
  prevalence = 0.5, # TODO: is this the same as set_distribution_tool()? If so, use this instead and note it above.
  as_proportion = TRUE
)
```

Use the `set_distribution_tool()` function to define the proportion of the population to receive the tool (set here to 50%).

```{r}
#| label: set-vaccine-distribution
set_distribution_tool(
  tool = vaccine_tool,
  distfun = distribute_tool_randomly(0.5, TRUE)
)
```

Add the vaccine to the model using the `add_tool()` function.

```{r}
#| label: add-vaccine
add_tool(model_sirconn, vaccine_tool)
```

```{r}
#| label: run-model-vaccine
run(model_sirconn, ndays = 50, seed = 1912)
plot(model_sirconn)
```

Note how the vaccine severely limits the number of infected agents.

### Add Events

In `epiworldR`, all models automatically have a global event that runs each day to update the agents. For this example, we'll add two additional events that represent public health interventions that start partway through the simulation as the dual-disease outbreak begins to gain traction:

-   Beginning on Day 10, a policy of social isolation is adopted which reduces the contact rate to 2
-   Beginning on Day 20, a TV advertisement is run increasing awareness of the outbreak, reducing the contact rate further to 1.5

Create these events using the `globalevent_set_params()` function, specifying the day to run the event.

```{r}
#| label: set-events
isolation_day_10 <- globalevent_set_params("Contact rate", 2, day = 10)
advertisement_day_20 <- globalevent_set_params("Contact rate", 1.5, day = 20)
```

Add the events to the model with the `add_globalevent()` function.

```{r}
#| label: add-events
add_globalevent(model_sirconn, isolation_day_10)
add_globalevent(model_sirconn, advertisement_day_20)
```

```{r}
#| label: run-full-model
run(model_sirconn, ndays = 50, seed = 1912)
plot(model_sirconn)
```

Note the sharp change to the infected curve corresponding to adoptiong of the social isolation policy.

### Full Model Summary

With our advanced model complete, we can view the summary, noting the events, viruses, and tools we added to the model.

```{r}
#| label: model-summary
summary(model_sirconn)
```

### Reproductive Numbers

The model computes two reproductive numbers, one for each virus.

```{r}
#| label: reproductive-numbers
repnum2 <- get_reproductive_number(model_sirconn)
plot(repnum2, type="b")
```

## Example Scenario 2: Comorbidities Using Logit Functions

Often, we want to model the effects of comorbidities on a disease. In this example, we'll examine the effects of obesity on the probability of recovery from the flu.

### Set Up the Models

Create two identical models using the `ModelSEIRCONN()` function. One will have comorbidities, the other will not.

```{r}
#| label: model-setup-comorb
# With comorbidities
model_comorbid <- ModelSEIRCONN(
  name              = "Flu",
  n                 = 10000, 
  prevalence        = 0.001, 
  contact_rate      = 2.1,
  transmission_rate = 0.5,
  incubation_days   = 7,
  recovery_rate     = 1/4
  )

# Without comorbidities
model_no_comorbid <- ModelSEIRCONN(
  name              = "Flu",
  n                 = 10000, 
  prevalence        = 0.001, 
  contact_rate      = 2.1,
  transmission_rate = 0.5,
  incubation_days   = 7,
  recovery_rate     = 1/4
  )
```

### Add Comorbidities

The file `part2b_comorb.rds` contains obesity data for the agents. This is formatted as a matrix with two columns: `baseline` and `obesity`. We'll read this in and assign it to the agents of the comorbidity model using the `set_agents_data()` function.

```{r}
#| label: add-obesity-data
obesity_data <- readRDS("part2b_comorb.rds")
set_agents_data(model_comorbid, obesity_data)
```

Now that population includes some agents with the obesity condition.

### Set Recovery Rate Based on Comorbidity

Use the `virus_fun_logit()` function to create a function for the probability of recovery. The function takes the following parameters:

-   `vars`: the variables to use in the model
-   `coefs`: the coefficients for each variable
-   `model`: the model object

TODO: Explain parameters better and clarify callout note

```{r}
#| label: set-logit-fun
# Logit function 
lfun <- virus_fun_logit(
  vars  = 0:1,
  coefs = c(-1.0986, -0.8472), 
  model_comorbid
  )
```

::: callout-note
To build the logit function, we used the following: (a) Under the logit model, the coefficient needed for the baseline probability of 0.25 is computed using `qlogis(0.25)`. With that, we can compute the associated coefficient to obese individuals with `plogis(qlogis(.25) + x) = .125` -\> `qlogis(.25) + x = plogis(.125)` -\> `x = qlogis(.125) - qlogis(.25)`
:::

Use the `set_prob_recovery_fun()` function to set the probability of recovery function for the virus to the logit function.

```{r}
#| label: set-prob-recovery-fun
set_prob_recovery_fun(
  virus = get_virus(model_comorbid, 0), 
  model = model_comorbid,
  vfun  = lfun
  )
```

### Run the Model

Run both models for the 50 days with the same random seed and compare the results.

```{r}
#| label: run-comorbid-models
verbose_off(model_comorbid)
verbose_off(model_no_comorbid)
run(model_comorbid, ndays = 50, seed = 1231)
run(model_no_comorbid, ndays = 50, seed = 1231)

op <- par(mfrow = c(1, 2), cex = .7)
plot_incidence(model_no_comorbid, main = "Without Comorbidities")
plot_incidence(model_comorbid, main = "With Comorbidities")
par(op)
```

Notice how the comorbidity of obesity results in many more infected agents than the when the comorbidity isn't present. Also, note how the `plot_incidence()` function output differs from that of the `plot()` function.

::: callout-note
If you want to drill further into this data, you can get the agents' final states using the function `get_agents_states()`.
:::

## Exercise

Using the `ModelSIRCONN()` function, create a 75-day simulation of the flu and the Coronavirus Delta variant with a masking tool. Initialize the model with the flu and add the Delta variant and tool to the flu model.

Assume the following:

-   **Population size:** 10,000 agents
-   **Contact Rate:** 2.1
-   **Recovery Rate:** $\frac{1}{4}$ (same for both diseases)
-   *Flu Parameters*
    -   **Initial Prevalence:** 0.001
    -   **Transmission Rate:** 0.5
-   *Delta variant Parameters*
    -   **Initial Prevalence:** 0.001
    -   **Transmission Rate:** 0.3
-   *Masking Tool Parameters:*
    -   **Transmission_reduction:** 0.3
    -   **Prevalence:** 0.6

::: {.callout-tip collapse="true"}
Masking only influences the transmission of a disease, thus transmission reduction = 0.3, and all other parameters of this tool will be 0.0.
:::

Run the model with `seed = 1912` and plot the model parameters and reproductive numbers over time.

```{r}
# Your solution here
```

After how many days does the number of infections peak in this simulation? How many infections occur at the peak?

```{r}
# Your solution here
```
