[
  {
    "objectID": "diffusion_exercise.html",
    "href": "diffusion_exercise.html",
    "title": "Diffusion Exercise",
    "section": "",
    "text": "Create a diffusion network model which simulates the diffusion of a rumor throughout the UKfaculty population of size n = 81. Use set.seed(2223).\n\nCodeset.seed(2223)\n\n# First, load in the dataset\nlibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\nCodedata(UKfaculty, package=\"igraphdata\")\nn &lt;- igraph::vcount(UKfaculty)\n\n# Turning the network into an edgelist\nlibrary(epiworldR)\nUKfaculty_vertex_data &lt;- as_data_frame(UKfaculty, what = c(\"vertices\"))\nUKfaculty_matrix &lt;- as.matrix(UKfaculty_vertex_data)\nUKfaculty_edgelist &lt;- as_edgelist(UKfaculty)\nlibrary(netplot)\n\nLoading required package: grid\n\n\n\nAttaching package: 'netplot'\n\n\nThe following object is masked from 'package:igraph':\n\n    ego\n\nCodenplot(UKfaculty)\n\n\n\nCode# Simulate a 2 col numeric matrix and use for data in next function\n# Creating the diffusion model\nadopt_rumor &lt;- ModelDiffNet(\n  \"Rumor\",\n  prevalence = .05,\n  prob_adopt = .1,\n  data       = UKfaculty_matrix,\n  params     = c(1, 4)\n)\n\ng &lt;- matrix(runif(n ^ 2) &lt; .01, nrow = n)\ndiag(g) &lt;- FALSE\nel &lt;- which(g, arr.ind = TRUE) - 1L\n\n# Simulating a population from smallworld - Use agents_from_edgelist\nagents_from_edgelist(adopt_rumor,\n                     source = el[,1],\n                     target = el[,2],\n                     size = n, \n                     directed = TRUE)\n\n# Running the model for 50 steps\nrun(adopt_rumor, 50)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCode# Plotting the model\nplot(adopt_rumor)"
  },
  {
    "objectID": "part2b.html",
    "href": "part2b.html",
    "title": "Part 2b: Adding Multiple Diseases & Tools",
    "section": "",
    "text": "epiworldR supports multi-virus and tools models, the below code gives instructions on how to implement this. First, build a SIRCONN model for COVID-19, which new viruses and tools will then be added to."
  },
  {
    "objectID": "part2b.html#adding-multiple-viruses-tools",
    "href": "part2b.html#adding-multiple-viruses-tools",
    "title": "Part 2b: Adding Multiple Diseases & Tools",
    "section": "Adding Multiple Viruses & Tools",
    "text": "Adding Multiple Viruses & Tools\n\nCodelibrary(epiworldR)\nmodel_sir &lt;- ModelSIRCONN(\n  name              = \"COVID-19\",\n  n                 = 50000, \n  prevalence        = 0.001, \n  contact_rate      = 2.5,\n  transmission_rate = 0.5,\n  recovery_rate     = 1/4\n  )\nrun(model_sir, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCodemodel_sir\n\n________________________________________________________________________________\nSusceptible-Infected-Removed (SIR) (connected)\nIt features 50000 agents, 1 virus(es), and 0 tool(s).\nThe model has 3 states.\nThe final distribution is: 521 Susceptible, 0 Infected, and 49479 Recovered.\n\n\nDesigning a Virus\nUsing the virus() function, assign a name to the new virus/variant with its corresponding rate of transmission to any given agent. In this example, prob_infecting = 0.35. In order to add this new virus to the model, use the add_virus() function by calling the original epiworldR model object, the new virus, and the new virus’ prevalence (which is set to 0.001 in this example).\n\nCode# Building the virus\nflu &lt;- virus(name = \"Flu\", prob_infecting = .35)\n\nWarning in virus(name = \"Flu\", prob_infecting = 0.35): Starting version 0.3-0,\nthe 'prevalence' argument is required. It will be set to be 0.5. Next versions\nwill fail with an error.\n\nCode# Adding the virus to the model\nadd_virus(model_sir, flu, proportion = .001)\n\nWarning in add_virus(model_sir, flu, proportion = 0.001): The argument\n'proportion' is deprecated and will be removed in the next version.\n\n\nDesigning a Tool\nProvide parameters for the new tool using the tool() function. These parameters include the tool’s name, any reduction in probabilities for the SIRCONN model parameters, and increased probability of recovery option. To add the tool to the SIRCONN model, use the add_tool() function with the SIRCONN model object, new tool, and prevalence of the tool. In this example, assume that 50% of the population will have received the vaccination.\n\nCode# Building the tool\nvaccine &lt;- tool(\n  name = \"Vaccine\",\n  susceptibility_reduction = .9,\n  transmission_reduction = .5,\n  recovery_enhancer = .5, \n  death_reduction = .9\n)\n\nWarning in tool(name = \"Vaccine\", susceptibility_reduction = 0.9,\ntransmission_reduction = 0.5, : Starting version 0.3-0, the 'prevalence'\nargument is required. It will be set to be 0.5. Next versions will fail with an\nerror.\n\nCode# Adding the tool to the model\nadd_tool(model_sir, vaccine, proportion = 0.5)\n\nWarning in add_tool(model_sir, vaccine, proportion = 0.5): The 'proportion'\nargument is deprecated. Use 'set_distribution_tool' instead.\n\n\nNext, run the updated model for 50 days, the output below describes the simulation. To confirm that the flu and vaccine are included, notice the presence of “Flu” in the Virus(es) section of the output, and “Vaccine” in the Tool(s) section.\n\nCoderun(model_sir, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCodesummary(model_sir)\n\n________________________________________________________________________________\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Removed (SIR) (connected)\nPopulation size     : 50000\nAgents' data        : (none)\nNumber of entities  : 0\nDays (duration)     : 50 (of 50)\nNumber of viruses   : 2\nLast run elapsed t  : 91.00ms\nTotal elapsed t     : 169.00ms (2 runs)\nLast run speed      : 27.40 million agents x day / second\nAverage run speed   : 29.44 million agents x day / second\nRewiring            : off\n\nGlobal events:\n - Update infected individuals (runs daily)\n\nVirus(es):\n - COVID-19\n - Flu\n\nTool(s):\n - Vaccine\n\nModel parameters:\n - Contact rate      : 2.5000\n - Recovery rate     : 0.2500\n - Transmission rate : 0.5000\n\nDistribution of the population at time 50:\n  - (0) Susceptible : 49900 -&gt; 22316\n  - (1) Infected    :   100 -&gt; 78\n  - (2) Recovered   :     0 -&gt; 27606\n\nTransition Probabilities:\n - Susceptible  0.98  0.02  0.00\n - Infected     0.00  0.69  0.31\n - Recovered    0.00  0.00  1.00\n\n\nPlotting\nPlotting the model with the additional virus and tool yields the following. Notice the presence of two reproductive numbers plotted over time. Variant 0 refers to COVID-19 and variant 1 refers to the flu.\n\nCoderepnum2 &lt;- get_reproductive_number(model_sir)\n\nop &lt;- par(mfrow = c(2,1))\nplot(model_sir)\nplot(repnum2, type=\"b\")\n\n\n\n\n\n\nCodepar(op)"
  },
  {
    "objectID": "part2b.html#comorbidities-using-logit-functions",
    "href": "part2b.html#comorbidities-using-logit-functions",
    "title": "Part 2b: Adding Multiple Diseases & Tools",
    "section": "Comorbidities Using Logit Functions",
    "text": "Comorbidities Using Logit Functions\nMany times we want to model the effects of comorbidities on the disease. For example, we may want to model the effects of obesity on the probability of recovery from COVID-19. To do this, we can use the virus_fun_logit() function to model the probability of recovery.\nThe steps are the following:\n\nCreate the model\nAssign the agents’ data (a matrix with covariates/features) to the model.\nCreate a function to model the probability of recovery using the virus_fun_logit() function.\nAdd the function to the virus’ recovery rate using set_prob_recovery_fun().\nRun the model.\n\nWe start by creating two matching models, one with comorbidities and one without.\n\nCode# With comorbidities\nmodel_comor &lt;- ModelSEIRCONN(\n  name              = \"Flu\",\n  n                 = 10000, \n  prevalence        = 0.001, \n  contact_rate      = 2.1,\n  transmission_rate = 0.5,\n  incubation_days   = 7,\n  recovery_rate     = 1/4\n  )\n\n# Without comorbidities\nmodel_no_comor &lt;- ModelSEIRCONN(\n  name              = \"Flu\",\n  n                 = 10000, \n  prevalence        = 0.001, \n  contact_rate      = 2.1,\n  transmission_rate = 0.5,\n  incubation_days   = 7,\n  recovery_rate     = 1/4\n  )\n\n\nNext, we will create a matrix with the agents’ data. As an example, we will create a matrix with two columns, one for the baseline and one for obesity.\n\nCode# Artificial population with obesity\nX &lt;- readRDS(\"part2b_comorb.rds\")\n\n\nLet’s now link agents’ data to the model. This will allow us to use the data to model the probability of recovery.\n\nCode# Adding the data to the model\nset_agents_data(model_comor, X)\nmodel_comor\n\n________________________________________________________________________________\nSusceptible-Exposed-Infected-Removed (SEIR) (connected)\nIt features 10000 agents, 1 virus(es), and 0 tool(s).\nThe model has 4 states. The model hasn't been run yet.\n\n\nWe then use virus_fun_logit() to create a function we can use to model the probability of recovery. The function takes in the following arguments:\n\n\nvars: the variables to use in the model\n\ncoefs: the coefficients for each variable\n\nmodel: the model object\n\n\nCode# Logit function \nlfun &lt;- virus_fun_logit(\n  vars  = 0:1,\n  coefs = c(-1.0986, -0.8472), \n  model_comor\n  )\n\n# Printing\nlfun\n\nAn epiworld_virus_function object.\n(model: Susceptible-Exposed-Infected-Removed (SEIR) (connected))\nThis function was built using -virus_fun_logit()-. and it features the following coefficients:\n  0: -1.10\n  1: -0.85 \n\n\n\n\n\n\n\n\nNote\n\n\n\nTo build the previous model, we used the following: (a) Under the logit model, the coefficient needed for the baseline probability of 0.25 is computed using qlogis(0.25). With that, we can go further and compute the associated coefficient to obese individuals with plogis(qlogis(.25) + x) = .125 -&gt; qlogis(.25) + x = plogis(.125) -&gt; x = qlogis(.125) - qlogis(.25)\n\n\nThe next step is to set the probability of recovery function for the virus. We can do this using the set_prob_recovery_fun() function:\n\nCode# Setting the probability of recovery\nset_prob_recovery_fun(\n  virus = get_virus(model_comor, 0), \n  model = model_comor,\n  vfun  = lfun\n  )\n\n\nWe are now ready to run the model.\n\nCoderun(model_comor, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCoderun(model_no_comor, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\n\nAnd see the result\n\nCodeop &lt;- par(mfrow = c(1, 2), cex = .7)\nplot_incidence(model_comor, main = \"With comorbidities\")\nplot_incidence(model_no_comor, main = \"Without comorbidities\")\n\n\n\n\n\n\nCodepar(op)\n\n\n\n\n\n\n\n\nTip\n\n\n\nWe can get information about agents’ final state using the function get_agents_state()."
  },
  {
    "objectID": "part2b.html#exercise",
    "href": "part2b.html#exercise",
    "title": "Part 2b: Adding Multiple Diseases & Tools",
    "section": "Exercise",
    "text": "Exercise\nUsing a SIRCONN model to simulate the Flu for 75 days, add the Coronavirus Delta variant and a masking tool to the model. Then plot the model parameters and reproductive numbers over time.\nAssume the following for model initialization:\n- n = 10000\n- prevalence = 0.001\n- contact_rate = 2.1\n- transmission_rate = 0.5\n- recovery_rate = \\(\\frac{1}{4}\\)\nAssume the Delta variant has:\n- prob_infecting = 0.3\n- recovery_rate = \\(\\frac{1}{4}\\)\n- prevalence = 0.001\n- When running the model, use seed = 1912\nAssume the masking tool has:\n- transmission_reduction = 0.3\n- proportion of complying agents = 0.6 (for adding the tool to the model)\nAfter how many days does the number of infections peak in this simulation? How many infections occur at the peak?\n\n\n\n\n\n\nTip\n\n\n\n\n\nMasking only influences the transmission of a disease, thus transmission reduction = 0.3, and all other parameters of this tool will be 0.0.\n\n\n\n\nCode# Your solution here"
  },
  {
    "objectID": "part3.html",
    "href": "part3.html",
    "title": "Part 3: Multiple Runs",
    "section": "",
    "text": "The purpose of the run_multiple function is to run a specified number of simulations using the same model object. That is, this function makes it possible to compare model results across several separate and repeated simulations."
  },
  {
    "objectID": "part3.html#introduction",
    "href": "part3.html#introduction",
    "title": "Part 3: Multiple Runs",
    "section": "",
    "text": "The purpose of the run_multiple function is to run a specified number of simulations using the same model object. That is, this function makes it possible to compare model results across several separate and repeated simulations."
  },
  {
    "objectID": "part3.html#the-principle-behind-multiple-runs",
    "href": "part3.html#the-principle-behind-multiple-runs",
    "title": "Part 3: Multiple Runs",
    "section": "The Principle Behind Multiple Runs",
    "text": "The Principle Behind Multiple Runs\n\n\n\n\n\n\n\n\nIn statistics, the Law of Large Numbers ensures that as the sample size increases, the sample mean (average) of a random variable will converge to the population mean. The same principle applies when using multiple runs to simulate epidemiological models. As the number of epiworldR simulations increases, the sample means of the reproductive number or model parameters, for example, will converge to their corresponding population means."
  },
  {
    "objectID": "part3.html#example-simulating-a-seirconn-model-500-times",
    "href": "part3.html#example-simulating-a-seirconn-model-500-times",
    "title": "Part 3: Multiple Runs",
    "section": "Example: Simulating a SEIRCONN Model 500 Times",
    "text": "Example: Simulating a SEIRCONN Model 500 Times\nSetup and Running Model\nTo use the run_multiple function in epiworldR, create your epiworldR_model of choice; in this case, the example uses a SEIRCONN model for Measles, 10000 people, an initial prevalence of 0.0001 (0.01%), a contact rate of 2, probability of transmission 0.5, a total of 7 incubation days, and probability of recovery \\(\\frac{1}{7}\\).\n\nCodelibrary(epiworldR)\nmodel_seirconn &lt;- ModelSEIRCONN(\n  name              = \"Measles\",\n  n                 = 5000, \n  prevalence        = 0.001, \n  contact_rate      = 2,\n  transmission_rate = 0.5,\n  incubation_days   = 7,\n  recovery_rate     = 1/7\n  )\n\n\nGenerating a Saver\nNext, generate a saver for the purpose of extracting the total_hist and reproductive information from the model object. Keep in mind that you can generate a saver for any metric compatible with the make_saver function (see details section of the make_saver help manual).\n\nCode# Generating a saver\n# ?make_saver\nsaver &lt;- make_saver(\"total_hist\", \"reproductive\")\n\n\nRunning the Simulation\nNow, use the run_multiple function with the model object, number of desired days to run the simulation, number of simulations to run, the generated saver, and number of threads for parallel computing.\n\nCode# Running and printing\nrun_multiple(model_seirconn, ndays = 50, nsims = 500, saver = saver, nthread = 4)\n\nStarting multiple runs (500)\n_________________________________________________________________________\n_________________________________________________________________________\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\n\nExtracting Results\nUsing the run_multiple_get_results function, extract the results from the model object that was simulated 500 times for comparison across simulations.\n\nCodehead(run_multiple_get_results(model_seirconn)$total_hist)\n\n  sim_num date nviruses       state counts\n1       1    0        1 Susceptible   4995\n2       1    0        1     Exposed      5\n3       1    0        1    Infected      0\n4       1    0        1   Recovered      0\n5       1    1        1 Susceptible   4995\n6       1    1        1     Exposed      4\n\nCodehead(run_multiple_get_results(model_seirconn)$reproductive)\n\n  sim_num virus_id   virus source source_exposure_date rt\n1       1        0 Measles   2483                   50  0\n2       1        0 Measles    825                   50  0\n3       1        0 Measles   4796                   49  0\n4       1        0 Measles   4791                   49  0\n5       1        0 Measles   4227                   49  0\n6       1        0 Measles   1916                   49  0\n\n\nPlotting\nTo plot the model parameters and reproductive numbers over time using boxplots, extract the results from the model object using run_multiple_get_results. For this example, the dates are filtered to observe the model parameters over the first 20 days. Notice each boxplot in the below table represents the observed values from each of the 500 simulations for each date.\n\nCodeseirconn_500 &lt;- run_multiple_get_results(model_seirconn)$total_hist\nseirconn_500 &lt;- seirconn_500[seirconn_500$date &lt;= 20,]\nplot(seirconn_500)\n\n\n\n\n\n\n\nTo view the a plot of the reproductive number over all 50 days for each of the 500 simulations, store the reproductive results to a new object using run_multiple_get_results, then plot using the plot function. Notice each source exposure date displays a boxplot representing the distribution of reproductive numbers across all 500 simulations for each date. As expected, the reproductive number on average, decreases over time.\n\nCodeseirconn_500_r &lt;- run_multiple_get_results(model_seirconn)$reproductive\nplot(seirconn_500_r)"
  },
  {
    "objectID": "part3.html#exercise-1",
    "href": "part3.html#exercise-1",
    "title": "Part 3: Multiple Runs",
    "section": "Exercise 1",
    "text": "Exercise 1\nConsider for this exercise that there is a Hepatitis A outbreak. Your goal is to observe the average reproductive number over 100 simulations. Using a run_multiple simulation, what is the average reproductive number over the course of the first 20 days? Use a SEIRCONN model with:\n- n = 10000\n- prevalence = 0.01\n- contact_rate = 2\n- transmission_rate = 0.5\n- incubation_days = 2\n- recovery_rate = \\(\\frac{1}{7}\\)\n\n\n\n\n\n\nTip\n\n\n\n\n\nGeneral Steps:\n1. Create epiworldR_model\n2. Generate saver\n3. Run epiworldR_model\n4. Plot average reproductive number\n\n\n\n\nCode# Your solution here"
  },
  {
    "objectID": "part3.html#exercise-2",
    "href": "part3.html#exercise-2",
    "title": "Part 3: Multiple Runs",
    "section": "Exercise 2",
    "text": "Exercise 2\nUsing the same SEIRCONN model from exercise 1, simulate a vaccine intervention for the previous exercise’s Hepatitis A virus outbreak where 50% of individuals in the population will receive the vaccine on day 10. How then, does the average reproductive number behave over 20 days and 100 simulations? Assume the following parameters:\n- susceptibility_reduction = .9\n- transmission_reduction = .5\n- recovery_enhancer = .5\n- death_reduction = .9\n\n\n\n\n\n\nTip\n\n\n\n\n\nGeneral Steps:\n1. Create tool\n2. Use globalaction_tool & add_global_action\n3. Generate saver & run_multiple\n4. Plot average reproductive number\n\n\n\n\nCode# Your solution here"
  },
  {
    "objectID": "build.html",
    "href": "build.html",
    "title": "epiworldR - Sunbelt 2023 Workshop",
    "section": "",
    "text": "To build the website from the command line: - Type: quarto preview . - To ensure that git is installed: module load quarto"
  },
  {
    "objectID": "part2a.html",
    "href": "part2a.html",
    "title": "Part 2a: Non-Disease Applications - Network Diffusion",
    "section": "",
    "text": "Though epiworldR focuses primarily on disease modeling, the epiworld framework is general enough to model any type of diffusion process, such as simulating the spread of ideas or rumors throughout a population. In this part of the workshop, we’ll walk through an example of social network diffusion."
  },
  {
    "objectID": "part2a.html#network-diffusion",
    "href": "part2a.html#network-diffusion",
    "title": "Part 2a: Social Network Analysis",
    "section": "",
    "text": "epiworldR also supports diffusion networks to simulate the spread of ideas or rumors throughout a population. The below example demonstrates this capability.\n\nGoal: Create a diffusion network model that simulates a rumor’s spread throughout the UKfaculty network of size n = 81. We start by loading the corresponding R packages and data.\nWe now load the UKfaculty data and visualize the network. The file part2a.rda has the network, the vertex attributes as a numeric matrix, and the edge list as a numeric matrix.\n\nCode# Loading the data for the section\nload(\"part2a.rda\")\n\n# Visualizing the Network\n# library(netplot)\nnplot(UKfaculty)\n\nThis graph was created by an old(er) igraph version.\nℹ Call `igraph::upgrade_graph()` on it to use with the current igraph version.\nFor now we convert it on the fly...\n\n\n\n\n\n\n\nCode# First few lines of the vertex attributes\nhead(UKfaculty_vertex)\n\n  Group age\n1     3  34\n2     1  47\n3     3  56\n4     3  42\n5     2  63\n6     2  65\n\nCode# First few lines of the edge list\nhead(UKfaculty_edgelist)\n\n     [,1] [,2]\n[1,]   57   52\n[2,]   76   42\n[3,]   12   69\n[4,]   43   34\n[5,]   28   47\n[6,]   58   51\n\n\nTo simulate the rumor, we use the ModelDiffNet function:\n\nCode# Creating the diffusion model\nlibrary(epiworldR)\nadopt_rumor &lt;- ModelDiffNet(\n  name       = \"The dean is leaving!\",\n  prevalence = 2/vcount(UKfaculty), # Two adopter\n  prob_adopt = .1,\n  data       = UKfaculty_vertex,\n  params     = c(0, 5)\n)\n\n# Reading in the network\nagents_from_edgelist(\n  adopt_rumor,\n  size     = vcount(UKfaculty),\n  source   = UKfaculty_edgelist[,1] - 1L,\n  target   = UKfaculty_edgelist[,2] - 1L,\n  directed = TRUE\n  )\n\n# Running the model for 50 steps\nrun(adopt_rumor, 100);adopt_rumor\n\n_________________________________________________________________________\nRunning the model...\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\n\n________________________________________________________________________________\nDiffusion of Innovations - The dean is leaving!\nIt features 81 agents, 1 virus(es), and 0 tool(s).\nThe model has 2 states.\nThe final distribution is: 0 Non adopters, and 81 Adopters.\n\nCode# Plotting the model\nplot(adopt_rumor)\n\n\n\n\n\n\n\nWe can extract the adoption network:\n\nCodetransmissions &lt;- get_transmissions(adopt_rumor)\n\nWarning in get_transmissions.epiworld_diffnet(adopt_rumor): The transmission\nnetwork is not necesarily relevant for the diffnet model\n\nCode# Turning it into a network via igraph\ntnet &lt;- graph_from_data_frame(\n  transmissions[, c(2, 3)] + 1, # To start from 1 (not 0)\n  directed = TRUE,\n  vertices = cbind(id = 1:81, UKfaculty_vertex)\n  )\n\n# Adding back vertex attributes\nnplot(tnet)"
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "This R package includes several popular epidemiological models, including SIS (wiki), SIR (wiki), and SEIR (wiki) using either a fully connected graph (similar to a compartmental model) or a user-defined network. Here are some examples:"
  },
  {
    "objectID": "examples.html#sir-model-using-a-random-graph",
    "href": "examples.html#sir-model-using-a-random-graph",
    "title": "Examples",
    "section": "SIR Model Using a Random Graph",
    "text": "SIR Model Using a Random Graph\nThis Susceptible-Infected-Recovered model features a population of 100,000 agents simulated in a small-world network. Each agent is connected to ten other agents. One percent of the population has the virus, with a 70% chance of transmission. Infected individuals recover at a 0.3 rate:\n\nCodelibrary(epiworldR)\n\n## Creating a SIR model\nsir &lt;- ModelSIR(\n  name           = \"COVID-19\",\n  prevalence     = .01,\n  transmission_rate  = .7,\n  recovery_rate =  .3\n  ) |&gt;\n  # Adding a Small world population \n  agents_smallworld(n = 100000, k = 10, d = FALSE, p = .01) |&gt;\n  # Running the model for 50 days\n  run(ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCodesir\n\n________________________________________________________________________________\nSusceptible-Infected-Recovered (SIR)\nIt features 100000 agents, 1 virus(es), and 0 tool(s).\nThe model has 3 states.\nThe final distribution is: 822 Susceptible, 415 Infected, and 98763 Recovered.\n\n\nVisualizing the outputs\n\nCodeplot(sir)"
  },
  {
    "objectID": "examples.html#seir-model-with-a-fully-connected-graph",
    "href": "examples.html#seir-model-with-a-fully-connected-graph",
    "title": "Examples",
    "section": "SEIR Model With a Fully Connected Graph",
    "text": "SEIR Model With a Fully Connected Graph\n\nCodemodel_seirconn &lt;- ModelSEIRCONN(\n  name                = \"COVID-19\",\n  prevalence          = 0.01, \n  n                   = 10000,\n  contact_rate        = 4, \n  incubation_days     = 7, \n  transmission_rate   = 0.6,\n  recovery_rate       = 0.5\n)\n\nset.seed(132)\nrun(model_seirconn, ndays = 100)\n\n_________________________________________________________________________\nRunning the model...\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\nCodemodel_seirconn\n\n________________________________________________________________________________\nSusceptible-Exposed-Infected-Removed (SEIR) (connected)\nIt features 10000 agents, 1 virus(es), and 0 tool(s).\nThe model has 4 states.\nThe final distribution is: 91 Susceptible, 0 Exposed, 0 Infected, and 9909 Recovered.\n\n\nComputing some key statistics: plotting and reproductive number (wiki)\n\nCodeplot(model_seirconn)\n\n\n\nCoderepnum &lt;- get_reproductive_number(model_seirconn)\nplot(repnum, type = \"b\")"
  },
  {
    "objectID": "examples.html#sir-logit",
    "href": "examples.html#sir-logit",
    "title": "Examples",
    "section": "SIR Logit",
    "text": "SIR Logit\n\nCodeset.seed(2223)\nn &lt;- 100000\n\nX &lt;- cbind(\n  Intercept = 1,\n  Female    = sample.int(2, n, replace = TRUE) - 1\n  )\n\ncoef_infect  &lt;- c(.1, -2, 2)\ncoef_recover &lt;- rnorm(2)\n\nmodel_logit &lt;- ModelSIRLogit(\n  \"covid2\",\n  data = X,\n  coefs_infect      = coef_infect,\n  coefs_recover     = coef_recover, \n  coef_infect_cols  = 1L:ncol(X),\n  coef_recover_cols = 1L:ncol(X), \n  prob_infection = .8,\n  recovery_rate = .3,\n  prevalence = .01\n)\n\nagents_smallworld(model_logit, n, 8, FALSE, .01)\n\nrun(model_logit, 50)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCodeplot(model_logit)\n\n\n\nCode## Females are supposed to be more likely to become infected\nrn &lt;- get_reproductive_number(model_logit)\n\n(table(\n  X[, \"Female\"],\n  (1:n %in% rn$source)\n) |&gt; prop.table())[,2]\n\n      0       1 \n0.12984 0.14201 \n\nCode## Looking into the agents\nget_agents(model_logit)\n\nAgents from the model \"Susceptible-Infected-Removed (SIR) (logit)\":\nAgent: 0, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 1, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 2, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 3, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 4, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 5, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 6, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 7, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 8, state: Susceptible (0), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 9, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\n... 99990 more agents ..."
  },
  {
    "objectID": "examples.html#transmission-network",
    "href": "examples.html#transmission-network",
    "title": "Examples",
    "section": "Transmission Network",
    "text": "Transmission Network\n\nCodesir &lt;- ModelSIR(\n  name              = \"COVID-19\",\n  prevalence        = .01,\n  transmission_rate = .5,\n  recovery_rate     = .5\n  ) |&gt;\n    # Adding a Small world population \n    agents_smallworld(n = 500, k = 10, d = FALSE, p = .01) |&gt;\n    # Running the model for 50 days\n    run(ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCode## Transmission network\nnet &lt;- get_transmissions(sir)\n\n## Plotting\nlibrary(netplot)\n\nLoading required package: grid\n\nCodelibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following object is masked from 'package:netplot':\n\n    ego\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\nCodex &lt;- graph_from_edgelist(as.matrix(net[,2:3]) + 1)\n\nnplot(x, edge.curvature = 0, edge.color = \"gray\", skip.vertex=TRUE)"
  },
  {
    "objectID": "examples.html#multiple-simulations",
    "href": "examples.html#multiple-simulations",
    "title": "Examples",
    "section": "Multiple Simulations",
    "text": "Multiple Simulations\n\nCodemodel_sir &lt;- ModelSIRCONN(\n  name              = \"COVID-19\",\n  prevalence        = 0.01,\n  n                 = 1000,\n  contact_rate      = 2,\n  transmission_rate = 0.9,\n  recovery_rate     = 0.1\n  )\n\n## Generating a saver\nsaver &lt;- make_saver(\"total_hist\", \"reproductive\")\n\n## Running and printing\nrun_multiple(model_sir, ndays = 100, nsims = 50, saver = saver, nthread = 2)\n\nStarting multiple runs (50) using 2 thread(s)\n_________________________________________________________________________\n_________________________________________________________________________\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\nCode## Retrieving the results\nans &lt;- run_multiple_get_results(model_sir)\n\nhead(ans$total_hist)\n\n  sim_num date nviruses       state counts\n1       1    0        1 Susceptible    990\n2       1    0        1    Infected     10\n3       1    0        1   Recovered      0\n4       1    1        1 Susceptible    974\n5       1    1        1    Infected     25\n6       1    1        1   Recovered      1\n\nCodehead(ans$reproductive)\n\n  sim_num virus_id    virus source source_exposure_date rt\n1       1        0 COVID-19    767                   11  0\n2       1        0 COVID-19    835                   10  0\n3       1        0 COVID-19    466                    9  0\n4       1        0 COVID-19    612                    9  0\n5       1        0 COVID-19    793                    9  0\n6       1        0 COVID-19     20                    8  0\n\nCodeplot(ans$reproductive)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "epiworldR Workshop - Sunbelt 2025",
    "section": "",
    "text": "Codelibrary(epiworldR)\n\n# Create a model\nmymodel &lt;- ModelSEIRCONN(\n  name = \"Nasty virus\", \n  n = 10000, \n  prevalence = .001, \n  contact_rate = 4,\n  transmission_rate = .4, \n  incubation_days = 7, \n  recovery_rate = 1/7\n) |&gt; verbose_off() \n\n# Add a second virus\nadd_virus(\n  mymodel, \n  virus(\n    name = \"Nasty virus 2\",\n    prob_infecting = .5,\n    recovery_rate = .3,\n    ), \n  proportion = .001\n)\n\n# Rename the model\nset_name(mymodel, mname = \"SEIR COVID-19 model\")\n\n# Run the model\nset.seed(8383)\nrun(mymodel, ndays = 100)\n\n# Plot the model\n# - Set graphical parameters to plot in 2x2 grid\nop &lt;- par(mfrow = c(2, 2), mar = par()$mar * c(1, 1, 1/2, 0))\n# - Plot\nplot(mymodel)\nplot_reproductive_number(mymodel)\nplot_incidence(mymodel)\nplot_generation_time(mymodel)\n# - Restore original graphical parameters\npar(op)\n\n\n\n\n\n\nFigure 1\nWelcome to the Sunbelt 2025 workshop Simulating Complex Agent-Based Models with epiworldR.\nThe epiworldR R package is a wrapper of the C++ library epiworld. It provides a fast, highly customizable framework for building network-based transmission/diffusion agent-based models (ABM).\nKey features of epiworldR include:\nAdditionally, while epiworldR was built for models of disease transmission, the epiworld framework is general enough to build models for any type of diffusion process (covered in Part 2a of this workshop)."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "epiworldR Sunbelt 2025 Workshop",
    "section": "Schedule",
    "text": "Schedule\nThank you for joining the epiworldR workshop at the Sunbelt 2025 conference. Our schedule for today is as follows:\n\nSetup (10 min)\n\nPart 1: Basic modeling (50 min)\nBreak (10 min)\n\nPart 2a: Social Network Analysis (30 min)\nPart 2b: Adding multiple diseases & tools (30 min)\nBreak (10 min)\n\nPart 3: Multiple runs (40 min)\n\nYou are welcome to use your personal computer, but we also have an online RStudio server available for you to use.1"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "epiworldR Workshop - Sunbelt 2025",
    "section": "Installation",
    "text": "Installation\nYou can install the development version of epiworldR from GitHub with:\n\nCode# install.packages(\"devtools\")\ndevtools::install_github(\"UofUEpiBio/epiworldR\")"
  },
  {
    "objectID": "index.html#agent-based-modeling",
    "href": "index.html#agent-based-modeling",
    "title": "epiworldR Workshop - Sunbelt 2025",
    "section": "Agent-Based Modeling",
    "text": "Agent-Based Modeling\nAgent-based modeling (ABM) is a powerful computational approach that enables the simulation and analysis of complex systems by representing individual agents and their interactions within an environment. ABM provides a bottom-up perspective, allowing for the examination of emergent phenomena arising from the collective behavior of autonomous agents. By capturing the heterogeneity, autonomy, and adaptive nature of agents, ABM offers a versatile tool for investigating various domains, including social sciences, economics, biology, and epidemiology, offering valuable insights into the dynamics and patterns that emerge from the interactions of individual entities within a larger system."
  },
  {
    "objectID": "index.html#terminology",
    "href": "index.html#terminology",
    "title": "epiworldR Workshop - Sunbelt 2025",
    "section": "Terminology",
    "text": "Terminology\nepiworldR focuses heavily on epidemiological applications to social networking. Below are some common terms that will be used throughout.\nSEIR, SIR, SIS, etc.:\nThese are epidemiological models that are used to analyze the spread and dynamics of diseases in a population. These models are a combination or selection of the states susceptible, exposed, infected, and/or recovered, in which all individuals in a population can be categorized in.\nSEIR connected (SEIRCONN), SIR connected (SIRCONN), etc.:\nThese are epidemiological models that are similar to their above counterparts (SEIR, SIR, etc.), but with the assumption that each individual agent is connected to all other agents.\nReproductive number:\nThe average number of secondary transmissions from one infected person. For example, a reproductive number of 2.0 indicates that one infected person transmits the disease to two other people in the population on average.\nIncidence:\nThe the occurrence of new cases of disease or injury in a population over a specified period of time. Specifically, daily incidence is computed in epiworldR."
  },
  {
    "objectID": "index.html#about-the-instructors",
    "href": "index.html#about-the-instructors",
    "title": "epiworldR Workshop - Sunbelt 2025",
    "section": "About the Instructors",
    "text": "About the Instructors\nAndrew Pulsipher is a software developer and Dr. George G. Vega Yon is a Research Assistant Professor of Epidemiology, both at the University of Utah’s School of Medicine.\n\n\nCodesir &lt;- ModelSIR(\n  name           = \"COVID-19\",\n  prevalence     = .01,\n  transmission_rate = .5,\n  recovery_rate       = .5\n  ) |&gt;\n    # Adding a Small world population \n    agents_smallworld(n = 500, k = 10, d = FALSE, p = .01) |&gt;\n    # Running the model for 50 days\n    verbose_off() |&gt;\n    run(ndays = 50, seed = 1912)\n\n## Transmission network\nnet &lt;- get_transmissions(sir)\n\n## Plotting\nlibrary(netplot)\nlibrary(igraph)\nx &lt;- graph_from_edgelist(as.matrix(net[,2:3]) + 1)\n\nnplot(x, edge.curvature = 0, edge.color = \"gray\", skip.vertex=TRUE)\n\n\n\n\n\n\nFigure 2: Example transmission network generated by epiworldR (plotted with netplot)"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "epiworldR Workshop - Sunbelt 2025",
    "section": "Footnotes",
    "text": "Footnotes\n\nPlease note that the online RStudio server and your data stored in it will be available for two weeks after the workshop. After that, the server will be shut down and all data will be deleted. If you would like to keep your data, please download it before the server is shut down.↩︎"
  },
  {
    "objectID": "part1.html",
    "href": "part1.html",
    "title": "Part 1: Basic Modeling",
    "section": "",
    "text": "General Structure of epiworldR\n\nAs shown in the above diagram, the core component of an epiworldR simulation is the model object. Models can have an arbitrary number of parameters, viruses, tools, and global events, depending on what the user wants to simulate. Pre-built models in epiworldR (e.g., ModelSIR, ModelSEIR, ModelDiffNet) typically initialize with a single virus and a few other parameters, such as the population size. All epiworldR models inherit the “epiworld_model” class, which gives them access to the following functions:\n\nCodelibrary(epiworldR)\nmethods(class = \"epiworld_model\")\n\n [1] add_param                  add_tool                  \n [3] add_virus                  agents_from_edgelist      \n [5] agents_smallworld          get_agents                \n [7] get_hist_tool              get_hist_total            \n [9] get_hist_transition_matrix get_hist_virus            \n[11] get_n_replicates           get_n_tools               \n[13] get_n_viruses              get_name                  \n[15] get_ndays                  get_param                 \n[17] get_reproductive_number    get_states                \n[19] get_today_total            get_transition_probability\n[21] get_transmissions          print                     \n[23] queuing_off                queuing_on                \n[25] run_multiple               run                       \n[27] set_name                   set_param                 \n[29] size                       summary                   \n[31] today                      verbose_off               \n[33] verbose_on                \nsee '?methods' for accessing help and source code\n\n\nIn this part of the workshop, we’ll use several of these functions as we walk through a basic modeling example for monkeypox."
  },
  {
    "objectID": "part1.html#motivating-example",
    "href": "part1.html#motivating-example",
    "title": "Part 1: Basic Modeling",
    "section": "Motivating Example",
    "text": "Motivating Example\n\nCode# Motivating example\nlibrary(epiworldR)\n\n# Create a model\nmodel_seirconn &lt;- ModelSEIRCONN(\n  name              = \"Monkeypox\",\n  n                 = 50000, \n  prevalence        = 0.0001, \n  contact_rate      = 4,\n  incubation_days   = 7,\n  transmission_rate = 0.5,\n  recovery_rate     = 1/7\n  )\n\n# Changing contact rate for Isolation and TV advertisement \nisolation_day_10 &lt;- globalevent_set_params(\"Contact rate\", 2, day = 10)\nadvertisement_day_20 &lt;- globalevent_set_params(\"Contact rate\", 1.5, day = 20)\n\n# Adding global actions to model\nadd_globalevent(model_seirconn, isolation_day_10)\nadd_globalevent(model_seirconn, advertisement_day_20)\n\n# Running and printing model summary\nverbose_off(model_seirconn)\nrun(model_seirconn, ndays = 60, seed = 1912)\nplot(model_seirconn)\n\n\n\n\n\n\nCodesummary(model_seirconn)\n\n________________________________________________________________________________\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Exposed-Infected-Removed (SEIR) (connected)\nPopulation size     : 50000\nAgents' data        : (none)\nNumber of entities  : 0\nDays (duration)     : 60 (of 60)\nNumber of viruses   : 1\nLast run elapsed t  : 115.00ms\nLast run speed      : 26.05 million agents x day / second\nRewiring            : off\n\nGlobal events:\n - Update infected individuals (runs daily)\n - Set Contact rate to 2 (day 10)\n - Set Contact rate to 1.5 (day 20)\n\nVirus(es):\n - Monkeypox\n\nTool(s):\n (none)\n\nModel parameters:\n - Avg. Incubation days : 7.0000\n - Contact rate         : 1.5000\n - Prob. Recovery       : 0.1429\n - Prob. Transmission   : 0.5000\n\nDistribution of the population at time 60:\n  - (0) Susceptible : 49995 -&gt; 1836\n  - (1) Exposed     :     5 -&gt; 6121\n  - (2) Infected    :     0 -&gt; 9947\n  - (3) Recovered   :     0 -&gt; 32096\n\nTransition Probabilities:\n - Susceptible  0.95  0.05  0.00  0.00\n - Exposed      0.00  0.86  0.14  0.00\n - Infected     0.00  0.00  0.87  0.13\n - Recovered    0.00  0.00  0.00  1.00\n\n\nRun the model again for 100 days.\n\nCode# Run the model\nrun(model_seirconn, ndays = 100, seed = 1912)\nmodel_seirconn\n\n________________________________________________________________________________\nSusceptible-Exposed-Infected-Removed (SEIR) (connected)\nIt features 50000 agents, 1 virus(es), and 0 tool(s).\nThe model has 4 states.\nThe final distribution is: 318 Susceptible, 109 Exposed, 399 Infected, and 49174 Recovered.\n\n\n\nCode# Plot the model\n# - Set graphical parameters to plot in 2x2 grid\nop &lt;- par(mfrow = c(2,2))\n# - Plot\nplot_incidence(model_seirconn)\nabline(v = 20, col = \"steelblue\", lwd = 2, lty = 2)\n\nplot_reproductive_number(model_seirconn)\nabline(v = 20, col = \"steelblue\", lwd = 2, lty = 2)\n\nplot_generation_time(model_seirconn)\nabline(v = 20, col = \"steelblue\", lwd = 2, lty = 2)\n# - Restore original graphical parameters\npar(op)"
  },
  {
    "objectID": "part1.html#example-1-simulating-a-sir-model",
    "href": "part1.html#example-1-simulating-a-sir-model",
    "title": "Part 1: Basic Modeling",
    "section": "Example 1: Simulating a SIR model",
    "text": "Example 1: Simulating a SIR model\nSetup and running the model\nThis example implements the following scenario:\n\nThe disease name is specified (COVID-19),\n50,000 agents are initialized,\nthe disease prevalence of 0.0001 is declared,\neach agent will contact two others (contact_rate),\nthe transmission rate of the disease for any given agent is 0.5, and\nthe recovery rate is set to \\(\\frac{1}{3}\\).\n\nTo create this model on epiworldR, we use the ModelSIRCONN() function. From here, the example will take you through the basic features of epiworldR.\n\nCodelibrary(epiworldR)\nmodel_sirconn &lt;- ModelSIRCONN(\n  name              = \"COVID-19\",\n  n                 = 50000, \n  prevalence        = 0.0001, \n  contact_rate      = 2,\n  transmission_rate = 0.5,\n  recovery_rate     = 1/3\n  )\n\n\nPrinting the model shows us some information. First, the name of the model, population size, number of entities (think of these as public spaces in which agents can make social contact with one another), the duration in days, number of variants, amount of time the last replicate took to run (last run elapsed t), and rewiring status (on or off). The next piece of information you will see is a list of the viruses used in the model. In this case, COVID-19 was the only disease used. Note that epiworldR has the capability to include more than one virus in a model. Tool(s) lists any tools that agents have to fight the virus. Examples ofthis may include masking, vaccines, social distancing, etc. In this model, no tools are specified. Lastly, the model parameters are listed, which originate from the parameters specified in the model.\n\nCodemodel_sirconn\n\n________________________________________________________________________________\nSusceptible-Infected-Removed (SIR) (connected)\nIt features 50000 agents, 1 virus(es), and 0 tool(s).\nThe model has 3 states. The model hasn't been run yet.\n\n\nTo execute the model, use the run function with the SIR model object, number of simulation days, and an optional seed for reproducibility. Next, print out the results from the simulated model using model_sir.\n\nCoderun(model_sirconn, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCodesummary(model_sirconn)\n\n________________________________________________________________________________\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Removed (SIR) (connected)\nPopulation size     : 50000\nAgents' data        : (none)\nNumber of entities  : 0\nDays (duration)     : 50 (of 50)\nNumber of viruses   : 1\nLast run elapsed t  : 57.00ms\nLast run speed      : 43.21 million agents x day / second\nRewiring            : off\n\nGlobal events:\n - Update infected individuals (runs daily)\n\nVirus(es):\n - COVID-19\n\nTool(s):\n (none)\n\nModel parameters:\n - Contact rate      : 2.0000\n - Recovery rate     : 0.3333\n - Transmission rate : 0.5000\n\nDistribution of the population at time 50:\n  - (0) Susceptible : 49995 -&gt; 3346\n  - (1) Infected    :     5 -&gt; 6\n  - (2) Recovered   :     0 -&gt; 46648\n\nTransition Probabilities:\n - Susceptible  0.95  0.05  0.00\n - Infected     0.00  0.67  0.33\n - Recovered    0.00  0.00  1.00\n\n\nThere are two additional sections in the model summary after running the model object summary, the first being the distribution of the population at time 50. This section describes the flow of agents from each state (SIR) after 50 days. The counts for these states will of course, change based on model parameters or simulation run-time. The transmission probabilities section outputs a 3x3 matrix that describes the probability of moving from one state to another. Notice in all cases, there is a probability of 0 to skip states. In other words, it is impossible for an agent to move from the susceptible state to the recovered state; that agent must pass through the infected state in order to then progress to the recovered state. The same logic applies with moving backwards; an agent cannot become susceptible again after being infected.\nExtracting Simulation Data\nAfter running the epiworldR model, below is a list of all the functions that can be called using the epiworldR model object. To demonstrate, start with the basic plot and get_hist_total functions.\n\nCodemethods(class = \"epiworld_model\")\n\n [1] add_param                  add_tool                  \n [3] add_virus                  agents_from_edgelist      \n [5] agents_smallworld          get_agents                \n [7] get_hist_tool              get_hist_total            \n [9] get_hist_transition_matrix get_hist_virus            \n[11] get_n_replicates           get_n_tools               \n[13] get_n_viruses              get_name                  \n[15] get_ndays                  get_param                 \n[17] get_reproductive_number    get_states                \n[19] get_today_total            get_transition_probability\n[21] get_transmissions          print                     \n[23] queuing_off                queuing_on                \n[25] run_multiple               run                       \n[27] set_name                   set_param                 \n[29] size                       summary                   \n[31] today                      verbose_off               \n[33] verbose_on                \nsee '?methods' for accessing help and source code\n\n\nVisualization\n\nCodeplot(model_sirconn)\n\n\n\n\n\n\n\nAs evident from the above plot, the SIR model constructed from epiworldR displays the changes in susceptible, infected, and recovered case counts over time (days). Notice after a certain amount of time, the curves flatten. Below, a table representation of the above plot is printed, complete with each state within the SIR model, date, and agent counts.\n\n\n\n\n\n\nConnected vs Non-connected Models\n\n\n\n\n\nThe above example uses a SIR connected model (ModelSIRCONN()), meaning that all agents in the model are connected with each other. When using a non-connected model (ex.ModelSEIR(), ModelSIR(), etc.), we do not assume that all agents in the model are connected with each other. Thus, a network of agents must be built using the agents_smallworld() function before running the model where:\n- n = number of agents\n- k = number of ties in the small world network\n- d = whether the graph is directed or not\n- p = probability of rewiring"
  },
  {
    "objectID": "part1.html#important-statistics",
    "href": "part1.html#important-statistics",
    "title": "Part 1: Basic Modeling",
    "section": "Important Statistics",
    "text": "Important Statistics\n\nCodehead(get_hist_total(model_sirconn))\n\n  date       state counts\n1    0 Susceptible  49995\n2    0    Infected      5\n3    0   Recovered      0\n4    1 Susceptible  49991\n5    1    Infected      8\n6    1   Recovered      1\n\n\nAn important statistic in epidemiological models is the reproductive number.\n\nCoderepnum &lt;- get_reproductive_number(model_sirconn)\nhead(repnum)\n\n  virus_id    virus source source_exposure_date rt\n1        0 COVID-19  26792                   47  0\n2        0 COVID-19  12690                   46  0\n3        0 COVID-19   8701                   46  0\n4        0 COVID-19  35250                   45  0\n5        0 COVID-19  46225                   44  0\n6        0 COVID-19  15139                   44  0\n\n\nepiworldR has a method to automatically plot the reproductive number. Thisfunction takes the average of values in the above table for each date and repeats until all date have been accounted for. For example, on average, individuals who acquired the virus on the 10th day transmit the virus to roughly 1.7 other individuals.\n\nCodex &lt;- plot(repnum, type=\"b\")"
  },
  {
    "objectID": "part1.html#exercise-1",
    "href": "part1.html#exercise-1",
    "title": "Part 1: Basic Modeling",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a SEIR model using the ModelSEIR() function (not ModelSEIRCONN()) to simulate a COVID-19 outbreak for 100 days in a population with:\n\n\nPopulation size: 10,000 agents\n\nInitial Disease Prevalence: 0.01\n\nIncubation Days: 4\n\nTransmission Rate: 0.9\n\nRecovery Rate: \\(\\frac{1}{4}\\)\n\n\nThen plot the model parameters to analyze changes in counts over time. When running the model, set seed = 1912.\nSince ModelSEIR is not connected, you will need to add a smallworld population using the agents_smallworld() function after initializing the model, using:\n\nn = 10000\nk = 5\nd = FALSE\np = .01\n\nFrom there, run the model and visualize.\nAfter how many days does the number of infections peak in this simulation? How many infections occur at the peak?\n\nCode# Your solution here"
  },
  {
    "objectID": "part1.html#exercise-2",
    "href": "part1.html#exercise-2",
    "title": "Part 1: Basic Modeling",
    "section": "Exercise 2",
    "text": "Exercise 2\nPlot the reproductive number of the COVID-19 simulated SEIR model over 100 days.\n\nCode# Your solution here"
  },
  {
    "objectID": "part1.html#footnotes",
    "href": "part1.html#footnotes",
    "title": "Part 1: Basic Modeling",
    "section": "Footnotes",
    "text": "Footnotes\n\nThis feature is currently under development. The repository of epiworld contains a branch with this feature.↩︎"
  },
  {
    "objectID": "index.html#workshop-schedule",
    "href": "index.html#workshop-schedule",
    "title": "epiworldR Workshop - Sunbelt 2025",
    "section": "Workshop Schedule",
    "text": "Workshop Schedule\n\n(10 min) Setup\n(50 min) Part 1: Basic modeling\n(10 min) Break\n(30 min) Part 2a: Social Network Analysis\n(30 min) Part 2b: Adding multiple diseases & tools\n(10 min) Break\n(40 min) Part 3: Multiple runs\n\nYou are welcome to use your personal computer, but we also have an online RStudio server available for you to use.1"
  },
  {
    "objectID": "index.html#workshop-details",
    "href": "index.html#workshop-details",
    "title": "epiworldR Workshop - Sunbelt 2025",
    "section": "Workshop Details",
    "text": "Workshop Details\nIf you don’t want to use your personal computer, we have an online RStudio server available for you to use.1\nSchedule\n\n(10 min) Setup\n(50 min) Part 1: Basic Modeling\n(10 min) Break\n(30 min) Part 2a: Non-Disease Applications (Social Network Analysis)\n(30 min) Part 2b: Adding Multiple Diseases & Tools\n(10 min) Break\n(40 min) Part 3: Multiple Runs\nInstall epiworldR\n\nYou can install the latest stable version of epiworldR from CRAN:\n\nCodeinstall.packages(\"epiworldR\")\n\n\nor the latest development version from GitHub:\n\nCode# install.packages(\"devtools\")\ndevtools::install_github(\"UofUEpiBio/epiworldR\")"
  },
  {
    "objectID": "index.html#overview-of-agent-based-modeling",
    "href": "index.html#overview-of-agent-based-modeling",
    "title": "epiworldR Workshop - Sunbelt 2025",
    "section": "Overview of Agent-Based Modeling",
    "text": "Overview of Agent-Based Modeling\nAgent-based modeling (ABM) is a powerful computational approach that enables the simulation and analysis of complex systems by representing individual agents and their interactions within an environment. ABM provides a bottom-up perspective, allowing for the examination of emergent phenomena arising from the collective behavior of autonomous agents. By capturing the heterogeneity, autonomy, and adaptive nature of agents, ABM offers a versatile tool for investigating various domains, including social sciences, economics, biology, and epidemiology, offering valuable insights into the dynamics and patterns that emerge from the interactions of individual entities within a larger system."
  },
  {
    "objectID": "index.html#relevant-terminology",
    "href": "index.html#relevant-terminology",
    "title": "epiworldR Workshop - Sunbelt 2025",
    "section": "Relevant Terminology",
    "text": "Relevant Terminology\nAgent-based modeling (ABM): A powerful computational approach that enables the simulation and analysis of complex systems by representing individual agents and their interactions within an environment. ABM provides a bottom-up perspective, allowing for the examination of emergent phenomena arising from the collective behavior of autonomous agents. By capturing the heterogeneity, autonomy, and adaptive nature of agents, ABM offers a versatile tool for investigating various domains, including social sciences, economics, biology, and epidemiology, offering valuable insights into the dynamics and patterns that emerge from the interactions of individual entities within a larger system.\nAs epiworldR focuses heavily on epidemiological applications, below are some common epidemiological terms that will be used throughout:\n\n\nSEIR, SIR, SIS, etc.: Epidemiological models used to analyze the spread and dynamics of diseases in a population. The models are named after the different compartments or states that an individual agent can fall into: Susceptible (S), Exposed (E), Infected (I), Recovered (R). So, SEIR has all four states, while SIR doesn’t have the Exposed state.\n\nSEIR connected (SEIRCONN), SIR connected (SIRCONN), etc.: Epidemiological models similar to their above counterparts (SEIR, SIR, etc.), but with the added assumption that each individual agent is connected to all other agents.\n\nReproductive number: The average number of secondary transmissions from one infected person. For example, a reproductive number of 2.0 indicates that one infected person transmits the disease to two other people in the population on average.\n\nIncidence: The occurrence of new cases of disease or injury in a population over a specified period of time. In epiworldR each step of a model represents a “day”, thus epiworldR computes daily incidence."
  },
  {
    "objectID": "part1.html#monkeypox-example",
    "href": "part1.html#monkeypox-example",
    "title": "Part 1: Basic Modeling",
    "section": "Monkeypox Example",
    "text": "Monkeypox Example\nUsing a contact rate of 4, a recovery rate of 1/7, and R0 for monkeypox of 2, we estimate a transmission rate using the R0 equation (R0 = P(transmit) * Contact Rate / P(Recovery))\n\nCodemonkeypox_contact_rate &lt;- 4\nmonkeypox_recovery_rate &lt;- 1/7\nmonkeypox_r0 &lt;- 2\nmonkeypox_transmission_rate &lt;- monkeypox_r0 * monkeypox_recovery_rate / monkeypox_contact_rate\n\n\nWe then plug these numbers into a SEIR Connected model for Monkeypox with a population of 50,000. We also add two interventions as model events:\n\nBeginning on Day 10 of the model, a policy of social isolation is adopted which reduces the contact rate to 2\nBeginning on Day 20, a TV advertisement is run increasing awareness of the monkeypox outbreak, reducing the contact rate further to 1.5\n\n\nCode# Motivating example\nlibrary(epiworldR)\n\n# Create a model\nmodel_seirconn &lt;- ModelSEIRCONN(\n  name              = \"Monkeypox\",\n  n                 = 50000, \n  prevalence        = 0.0001, \n  contact_rate      = monkeypox_contact_rate,\n  incubation_days   = 7,\n  transmission_rate = monkeypox_transmission_rate,\n  recovery_rate     = monkeypox_recovery_rate\n  )\n\n# Changing contact rate for Isolation and TV advertisement \nisolation_day_10 &lt;- globalevent_set_params(\"Contact rate\", 2, day = 10)\nadvertisement_day_20 &lt;- globalevent_set_params(\"Contact rate\", 1.5, day = 20)\n\n# Adding global actions to model\nadd_globalevent(model_seirconn, isolation_day_10)\nadd_globalevent(model_seirconn, advertisement_day_20)\n\n# Running and printing model summary\nverbose_off(model_seirconn)\nrun(model_seirconn, ndays = 60, seed = 1912)\nplot(model_seirconn)\n\n\n\n\n\n\nCodesummary(model_seirconn)\n\n________________________________________________________________________________\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Exposed-Infected-Removed (SEIR) (connected)\nPopulation size     : 50000\nAgents' data        : (none)\nNumber of entities  : 0\nDays (duration)     : 60 (of 60)\nNumber of viruses   : 1\nLast run elapsed t  : 29.00ms\nLast run speed      : 103.34 million agents x day / second\nRewiring            : off\n\nGlobal events:\n - Update infected individuals (runs daily)\n - Set Contact rate to 2 (day 10)\n - Set Contact rate to 1.5 (day 20)\n\nVirus(es):\n - Monkeypox\n\nTool(s):\n (none)\n\nModel parameters:\n - Avg. Incubation days : 7.0000\n - Contact rate         : 1.5000\n - Prob. Recovery       : 0.1429\n - Prob. Transmission   : 0.0714\n\nDistribution of the population at time 60:\n  - (0) Susceptible : 49995 -&gt; 49934\n  - (1) Exposed     :     5 -&gt; 8\n  - (2) Infected    :     0 -&gt; 9\n  - (3) Recovered   :     0 -&gt; 49\n\nTransition Probabilities:\n - Susceptible  1.00  0.00  0.00  0.00\n - Exposed      0.00  0.87  0.13  0.00\n - Infected     0.00  0.00  0.89  0.11\n - Recovered    0.00  0.00  0.00  1.00\n\n\nepiworldR allows us to re-run the model without needing to re-initialize the model. In the above case, we ran the model for 60 days, now we run it again for 100 days.\n\nCode# Run the model\nrun(model_seirconn, ndays = 100, seed = 1912)\nmodel_seirconn\n\n________________________________________________________________________________\nSusceptible-Exposed-Infected-Removed (SEIR) (connected)\nIt features 50000 agents, 1 virus(es), and 0 tool(s).\nThe model has 4 states.\nThe final distribution is: 49973 Susceptible, 2 Exposed, 3 Infected, and 22 Recovered.\n\n\nFinally, we plot the results of the 100-day model run:\n\nCode# Plot the model\n# - Set graphical parameters to plot in 2x2 grid\nop &lt;- par(mfrow = c(2,2))\n# - Plot\nplot_incidence(model_seirconn)\nabline(v = 20, col = \"steelblue\", lwd = 2, lty = 2)\n\nplot_reproductive_number(model_seirconn)\nabline(v = 20, col = \"steelblue\", lwd = 2, lty = 2)\n\nplot_generation_time(model_seirconn)\nabline(v = 20, col = \"steelblue\", lwd = 2, lty = 2)\n# - Restore original graphical parameters\npar(op)"
  },
  {
    "objectID": "part1.html#overview-of-epiworldr",
    "href": "part1.html#overview-of-epiworldr",
    "title": "Part 1: Basic Modeling",
    "section": "",
    "text": "General Structure of epiworldR\n\nAs shown in the above diagram, the core component of an epiworldR simulation is the model object. Models can have an arbitrary number of parameters, viruses, tools, and global events, depending on what the user wants to simulate. Pre-built models in epiworldR (e.g., ModelSIR, ModelSEIR, ModelDiffNet) typically initialize with a single virus and a few other parameters, such as the population size. All epiworldR models inherit the “epiworld_model” class, which gives them access to the following functions:\n\nCodelibrary(epiworldR)\nmethods(class = \"epiworld_model\")\n\n [1] add_param                  add_tool                  \n [3] add_virus                  agents_from_edgelist      \n [5] agents_smallworld          get_agents                \n [7] get_hist_tool              get_hist_total            \n [9] get_hist_transition_matrix get_hist_virus            \n[11] get_n_replicates           get_n_tools               \n[13] get_n_viruses              get_name                  \n[15] get_ndays                  get_param                 \n[17] get_reproductive_number    get_states                \n[19] get_today_total            get_transition_probability\n[21] get_transmissions          print                     \n[23] queuing_off                queuing_on                \n[25] run_multiple               run                       \n[27] set_name                   set_param                 \n[29] size                       summary                   \n[31] today                      verbose_off               \n[33] verbose_on                \nsee '?methods' for accessing help and source code\n\n\nIn this part of the workshop, we’ll use several of these functions as we walk through a basic modeling example for monkeypox."
  },
  {
    "objectID": "part1.html#example-scenario-monkeypox-outbreak",
    "href": "part1.html#example-scenario-monkeypox-outbreak",
    "title": "Part 1: Basic Modeling",
    "section": "Example Scenario: Monkeypox Outbreak",
    "text": "Example Scenario: Monkeypox Outbreak\nThe example implements the following scenario:\n\n\nDisease: Monkeypox\n\nPopulation size: 50,000 agents\n\nInitial Disease Prevalence: 0.0001 (5 agents start the simulation exposed to the virus)\n\nContact Rate: 4 (each agent will contact 4 others during each model step/day)\n\nIncubation Days: 7 (how long after infection before symptoms appear)\n\nTransmission Rate: 0.5 (the probability an infected agent infects another agent)\n\nRecovery Rate: \\(\\frac{1}{7}\\) (infected agents take 7 days to recover)\n\nSet up the Model\nCreate the model with the above characteristics using the ModelSEIRCONN() function.\n\nCodemonkeypox_model &lt;- ModelSEIRCONN(\n  name              = \"Monkeypox\",\n  n                 = 50000, \n  prevalence        = 0.0001, \n  contact_rate      = 4,\n  incubation_days   = 7,\n  transmission_rate = 0.5,\n  recovery_rate     = 1/7\n  )\n\n\nRun the Model\nExecute the model using the run() function, passing the model object, the number of simulation days (in this case, 100 days), and an optional seed for reproducibility. Use the verbose_off() function before running the model to suppress output generated by hte run() function.\n\n\n\n\n\n\nConnected vs Non-Connected Models\n\n\n\n\n\nThis example uses a SEIR connected model (ModelSEIRCONN()), meaning that all agents in the model are connected with each other. Non-connected models (e.g., ModelSEIR(), ModelSIR()) don’t assume all agents are connected, thus a network of agents must be built using the agents_smallworld() function before running the model where:\n- n = number of agents\n- k = number of ties in the small world network\n- d = whether the graph is directed or not\n- p = probability of rewiring\n\n\n\n\nCodeverbose_off(monkeypox_model)\nrun(monkeypox_model, ndays = 100, seed = 1912)\n\nmonkeypox_model\n\n________________________________________________________________________________\nSusceptible-Exposed-Infected-Removed (SEIR) (connected)\nIt features 50000 agents, 1 virus(es), and 0 tool(s).\nThe model has 4 states.\nThe final distribution is: 0 Susceptible, 1 Exposed, 8 Infected, and 49991 Recovered.\n\n\nAfter running the model, printing it gives the final distribution of agents across the four SEIR states. If we want to re-run the model for a different duraction, epiworldR allows us to do this without re-initializing the model.\n\nCoderun(monkeypox_model, ndays = 60, seed = 1912)\nmonkeypox_model\n\n________________________________________________________________________________\nSusceptible-Exposed-Infected-Removed (SEIR) (connected)\nIt features 50000 agents, 1 virus(es), and 0 tool(s).\nThe model has 4 states.\nThe final distribution is: 0 Susceptible, 474 Exposed, 2263 Infected, and 47263 Recovered.\n\n\nModel Summary\nFor more detailed output than the simple print, use the summary() function:\n\nCodesummary(monkeypox_model)\n\n________________________________________________________________________________\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Exposed-Infected-Removed (SEIR) (connected)\nPopulation size     : 50000\nAgents' data        : (none)\nNumber of entities  : 0\nDays (duration)     : 60 (of 60)\nNumber of viruses   : 1\nLast run elapsed t  : 104.00ms\nTotal elapsed t     : 234.00ms (2 runs)\nLast run speed      : 28.60 million agents x day / second\nAverage run speed   : 25.56 million agents x day / second\nRewiring            : off\n\nGlobal events:\n - Update infected individuals (runs daily)\n\nVirus(es):\n - Monkeypox\n\nTool(s):\n (none)\n\nModel parameters:\n - Avg. Incubation days : 7.0000\n - Contact rate         : 4.0000\n - Prob. Recovery       : 0.1429\n - Prob. Transmission   : 0.5000\n\nDistribution of the population at time 60:\n  - (0) Susceptible : 49995 -&gt; 0\n  - (1) Exposed     :     5 -&gt; 474\n  - (2) Infected    :     0 -&gt; 2263\n  - (3) Recovered   :     0 -&gt; 47263\n\nTransition Probabilities:\n - Susceptible  0.82  0.18  0.00  0.00\n - Exposed      0.00  0.86  0.14  0.00\n - Infected     0.00  0.00  0.87  0.13\n - Recovered    0.00  0.00  0.00  1.00\n\n\nThe summary() function provides a lot more information on the model:\n\nSummary of the simulation itself, giving details on the size of the model, the number of entities (think of these are public spaces in which agents can make contact with one another, we’ll cover them later), the elapsed time for the simulation, etc.\nList of global events. The model automatically includes an event to update infected individuals, which runs on each day of the model. During this event, infected agents contact other agents (with a chance to infect them) and/or recover from the disease. Users can define additional events and specify when they run (e.g., daily, weekly, once after 20 days, when the number of infected agents crosses a certain threshold, etc.).\nLists of viruses and tools. Our example has 1 virus and 0 tools, but epiworldR models can have any number of viruses and tools.\nList of model parameters given at initialization.\nInitial and final distribution of agents across SEIR states.\nTransition Probabilities Matrix, which shows the probability of an agent in one state moving to a different state at a given step of the model. Notice that there is a probability of 0.0 to skip states. In other words, an agent cannot move from Susceptible directly to Recovered; that agent must pass through the Infected state before progressing to Recovered. The same logic applies in the reverse direction; an agent cannot become Susceptible again after being Infected.\n\nTake some time to familiarize yourself with this output.\nModel Visualization\n\nCodeplot(monkeypox_model)\n\n\n\n\n\n\n\nThe plot() function plots the number of agents in each of the four SEIR states over the course of the model simulation. You can get this data in tabular form with the get_hist_total() function:\n\nCodehead(get_hist_total(monkeypox_model))\n\n  date       state counts\n1    0 Susceptible  49995\n2    0     Exposed      5\n3    0    Infected      0\n4    0   Recovered      0\n5    1 Susceptible  49995\n6    1     Exposed      4\n\n\nReproductive Number\nAn important statistic in epidemiological models is the reproductive number. We get this from an epiworldR model using the get_reproductive_number() function.\n\nCoderepnum &lt;- get_reproductive_number(monkeypox_model)\nhead(repnum)\n\n  virus_id     virus source source_exposure_date rt\n1        0 Monkeypox  13873                   48  0\n2        0 Monkeypox   2890                   48  0\n3        0 Monkeypox  47514                   46  0\n4        0 Monkeypox  34129                   46  0\n5        0 Monkeypox  48375                   45  0\n6        0 Monkeypox  31698                   45  0\n\n\nTODO: Explanation of this output. Does every agent have an rt?\nPlot the reproductive number using:\n\nCodex &lt;- plot(repnum, type=\"b\")\n\n\n\n\n\n\n\nThis function takes the average of values in the above table for each date and repeats until all dates have been accounted for. For example, on average, individuals who acquired the virus on the 10th day transmit the virus to roughly 10 other individuals."
  },
  {
    "objectID": "part2a.html#non-disease-applications-network-diffusion",
    "href": "part2a.html#non-disease-applications-network-diffusion",
    "title": "Part 2a: Non-Disease Applications - Network Diffusion",
    "section": "",
    "text": "Though epiworldR focuses primarily on disease modeling, the epiworld framework is general enough to model any type of diffusion process, such as simulating the spread of ideas or rumors throughout a population. In this part of the workshop, we’ll walk through an example of social network diffusion."
  },
  {
    "objectID": "part2a.html#example-scenario-academic-faculty-rumor",
    "href": "part2a.html#example-scenario-academic-faculty-rumor",
    "title": "Part 2a: Non-Disease Applications - Network Diffusion",
    "section": "Example Scenario: Academic Faculty Rumor",
    "text": "Example Scenario: Academic Faculty Rumor\nThe example implements the following scenario:\n\n\nRumor: The dean will resign!\n\nPopulation Description: A UK university faculty\n\nPopulation size: 81 agents\n\nLoad Packages and Data\nWe use the igraph and netplot R packages for manipulating and plotting networks respectively. The file part2a.rda includes the UKfaculty friendship network from the igraphdata package, with the vertex attributes (UKfaculty_vertex) and edge list (UKfaculty_edgelist) as numeric matrices. We load the UKfaculty data and visualize the friendship network.\n\nCodeload(\"part2a.rda\")\n\nnplot(UKfaculty)\n\n\n\n\n\n\n\nSimulating the Rumor\nUsing the ModelDiffNet() function, we can simulate how the rumor spreads through the network. First, we create the network diffusion model. The prevalence of the rumor is set such that 2 agents are exposed to the rumor at the start of the simulation. The probability of an agent adopting the rumor is 0.1. TODO: Explain the params.\n\nCodelibrary(epiworldR)\n\nadopt_rumor &lt;- ModelDiffNet(\n  name       = \"The dean will resign!\",\n  prevalence = 2/vcount(UKfaculty),\n  prob_adopt = .1,\n  data       = UKfaculty_vertex,\n  params     = c(0, 5)\n)\n\n\nWe then initialize the model agents using the agents_from_edgelist() function.\n\nCode# Reading in the network\nagents_from_edgelist(\n  adopt_rumor,\n  size     = vcount(UKfaculty),\n  source   = UKfaculty_edgelist[,1] - 1L,\n  target   = UKfaculty_edgelist[,2] - 1L,\n  directed = TRUE\n  )\n\n\nWe run the model for 100 days.\n\nCodeverbose_off(adopt_rumor)\nrun(adopt_rumor, ndays = 100)\n\nadopt_rumor\n\n________________________________________________________________________________\nDiffusion of Innovations - The dean will resign!\nIt features 81 agents, 1 virus(es), and 0 tool(s).\nThe model has 2 states.\nThe final distribution is: 0 Non adopters, and 81 Adopters.\n\n\nFinally, we plot the model.\n\nCodeplot(adopt_rumor)\n\n\n\n\n\n\n\nAs demonstrated in the plot, by day 20, the entire network had adopted the rumor that the dean was resigning.\nView the Adoption Network\nThe transmission network is not always relevant for a diffusion network model, but in this case we can use it to visualize the spread of the rumor through the network. We get the transmission network using the get_transmissions() function, then plot the network using igraph and netplot\n\nCodetransmissions &lt;- get_transmissions(adopt_rumor)\n\nWarning in get_transmissions.epiworld_diffnet(adopt_rumor): The transmission\nnetwork is not necesarily relevant for the diffnet model\n\nCode# Turning it into a network via igraph\ntnet &lt;- graph_from_data_frame(\n  transmissions[, c(2, 3)] + 1, # To start from 1 (not 0)\n  directed = TRUE,\n  vertices = cbind(id = 1:81, UKfaculty_vertex)\n  )\n\n# Adding back vertex attributes\nnplot(tnet)"
  }
]