[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "epiworldR Sunbelt 2023 Workshop",
    "section": "",
    "text": "Code\nlibrary(epiworldR)\n\n# Creating a model\nmymodel &lt;- ModelSEIRCONN(\n  name = \"Nasty virus\", n = 10000, prevalence = .001, contact_rate = 4,\n  prob_transmission = .4, incubation_days = 7, prob_recovery = 1/7\n) |&gt; verbose_off() \n\n# Adding a virus\nadd_virus(mymodel, virus(\"Nasty virus 2\", .5, .3), proportion = .001)\n\n# Renaming the model\nset_name(mymodel, mname = \"SEIR COVID-19 model\")\n\n# Running the model\nset.seed(8383)\nrun(mymodel, ndays = 100)\n\nop &lt;- par(mfrow = c(2, 2), mar = par()$mar * c(1, 1, 1/2, 0))\nplot(mymodel)\nplot_reproductive_number(mymodel)\nplot_incidence(mymodel)\nplot_generation_time(mymodel)\npar(op)\n\n\n\n\n\nFigure 1: ?(caption)\nThe epiworldR R package is a wrapper of the C++ library epiworld. It provides a general framework for modeling disease transmission using agent-based models wiki. Some main features include:"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "epiworldR Sunbelt 2023 Workshop",
    "section": "Installation",
    "text": "Installation\nYou can install the development version of epiworldR from GitHub with:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"UofUEpiBio/epiworldR\")"
  },
  {
    "objectID": "index.html#about-the-instructors",
    "href": "index.html#about-the-instructors",
    "title": "epiworldR Sunbelt 2023 Workshop",
    "section": "About the instructors",
    "text": "About the instructors\nDr. George G. Vega Yon is a Research Assistant Professor of Epidemiology at the Department of Internal Medicine at the University of Utah.\nDerek S. Meyer is a Research Assistant and M.Sc. student in Biostatistics at the Department of Internal Medicine at the University of Utah."
  },
  {
    "objectID": "part2.html",
    "href": "part2.html",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "",
    "text": "epiworldR supports multi-variant models, the below code gives instructions on how to implement this. First, build a SIRCONN model for COVID-19, which new viruses and tools will then be added to."
  },
  {
    "objectID": "part2.html#adding-multiple-viruses-variants",
    "href": "part2.html#adding-multiple-viruses-variants",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Adding Multiple Viruses & Variants",
    "text": "Adding Multiple Viruses & Variants\n\nlibrary(epiworldR)\nmodel_sir &lt;- ModelSIRCONN(\n  name              = \"COVID-19\",\n  n                 = 100000, \n  prevalence        = 0.0001, \n  contact_rate      = 2,\n  prob_transmission = 0.5,\n  prob_recovery     = 1/3\n  )\nrun(model_sir, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nmodel_sir\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Removed (SIR) (connected)\nPopulation size     : 100000\nAgents' data        : (none)\nNumber of entities  : 0\nDays (duration)     : 50 (of 50)\nNumber of variants  : 1\nLast run elapsed t  : 832.00ms\nLast run speed      : 6.00 million agents x day / second\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 0.01%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Contact rate       : 2.0000\n - Prob. Recovery     : 0.3333\n - Prob. Transmission : 0.5000\n\nDistribution of the population at time 50:\n  - (0) Susceptible :  99990 -&gt; 6514\n  - (1) Infected    :     10 -&gt; 3\n  - (2) Recovered   :      0 -&gt; 93483\n\nTransition Probabilities:\n - Susceptible  0.95  0.05  0.00\n - Infected     0.00  0.67  0.33\n - Recovered    0.00  0.00  1.00\n\n\n\nDesigning the Virus\nUsing the virus function, assign a name the new virus/variant with its corresponding probability of infecting any given agent. In this example, prob_infecting = 0.3. In order to add this new virus to the model, use the add_virus function by calling the original epiworldR model object, the new virus, and the new virus’ prevalence (which is set to 0.0001 in this example).\n\n# Building the virus\nflu &lt;- virus(name = \"Flu\", prob_infecting = .3)\n\n# Adding the virus to the model\nadd_virus(model_sir, flu, .0001)\n\nNext, run the updated model with the new virus for 50 days, the output below describes the simulation. To confirm that the flu is included, notice the presence of “Flu” in the Virus(es) section of the output. All other output is interpretable as specified in previous sections.\n\nrun(model_sir, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nmodel_sir\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Removed (SIR) (connected)\nPopulation size     : 100000\nAgents' data        : (none)\nNumber of entities  : 0\nDays (duration)     : 50 (of 50)\nNumber of variants  : 2\nLast run elapsed t  : 0.00s\nTotal elapsed t     : 1.00s (2 runs)\nLast run speed      : 5.39 million agents x day / second\nAverage run speed   : 5.68 million agents x day / second\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 0.01%)\n - Flu (baseline prevalence: 0.01%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Contact rate       : 2.0000\n - Prob. Recovery     : 0.3333\n - Prob. Transmission : 0.5000\n\nDistribution of the population at time 50:\n  - (0) Susceptible :  99980 -&gt; 6488\n  - (1) Infected    :     20 -&gt; 8\n  - (2) Recovered   :      0 -&gt; 93504\n\nTransition Probabilities:\n - Susceptible  0.95  0.05  0.00\n - Infected     0.00  0.66  0.34\n - Recovered    0.00  0.00  1.00\n\n\n\n\nPlotting\nPlotting the previous model (including the flu) yields the following. Notice the presence of two reproductive numbers plotted over time. Variant 0 refers to COVID-19 and variant 1 refers to the flu.\n\nrepnum2 &lt;- get_reproductive_number(model_sir)\n\nop &lt;- par(mfrow = c(2,1))\nplot(model_sir)\nplot(repnum2, type=\"b\")\n\n\n\npar(op)"
  },
  {
    "objectID": "part2.html#tools",
    "href": "part2.html#tools",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Tools",
    "text": "Tools\nNow, the implementation of tools to combat any viruses and variants in the model will be demonstrated. First, for simplicity, remove the flu virus from the SIR model object (keep in mind the index for the flu virus in the model object is 1). Next, provide parameters for the new tool using the “tool” function. These parameters include the name of the tool, any reduction in probabilities for the SIR model parameters, and increased probability of recovery option. In order to add the tool to the SIR model, use the add_tool function with the SIR model object, new tool, and prevalence of the tool. In this example, assume that 50% of the population will have received the vaccination.\n\n# Removing the flu virus from the model\nrm_virus(model_sir, 1)\n\nvaccine &lt;- tool(\n  name = \"Vaccine\",\n  susceptibility_reduction = .9,\n  transmission_reduction = .5,\n  recovery_enhancer = .5, \n  death_reduction = .9\n)\n\nadd_tool(model_sir, vaccine, 0.5)\nrun(model_sir, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\n\n\nPlotting\n\nrepnum3 &lt;- get_reproductive_number(model_sir)\n\nop &lt;- par(mfrow = c(2,1))\nplot(model_sir)\nplot(repnum3, type=\"b\")\n\n\n\npar(op)"
  },
  {
    "objectID": "part2.html#comorbidities-using-logit-functions",
    "href": "part2.html#comorbidities-using-logit-functions",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Comorbidities Using Logit Functions",
    "text": "Comorbidities Using Logit Functions\nMany times we want to model the effects of comorbidities on the disease. For example, we may want to model the effects of obesity on the probability of recovery from COVID-19. To do this, we can use the virus_fun_logit() function to model the probability of recovery.\nThe steps are the following:\n\nCreate the model\nAssign the agents’ data (a matrix with covariates/features) to the model.\nCreate a function to model the probability of recovery using the virus_fun_logit() function.\nAdd the function to the virus’ recovery rate using set_prob_recovery_fun().\nRun the model.\n\nWe start by creating two matching models, one with comorbidities and one without.\n\n# With comorbidities\nmodel_comor &lt;- ModelSEIRCONN(\n  name              = \"Flu\",\n  n                 = 10000, \n  prevalence        = 0.001, \n  contact_rate      = 2.1,\n  prob_transmission = 0.5,\n  incubation_days   = 7,\n  prob_recovery     = 1/4\n  )\n\n# Without comorbidities\nmodel_no_comor &lt;- ModelSEIRCONN(\n  name              = \"Flu\",\n  n                 = 10000, \n  prevalence        = 0.001, \n  contact_rate      = 2.1,\n  prob_transmission = 0.5,\n  incubation_days   = 7,\n  prob_recovery     = 1/4\n  )\n\nNext, we will create a matrix with the agents’ data. As an example, we will create a matrix with two columns, one for the baseline and one for obesity.\n\n# Artificial population with obesity\nset.seed(88)\nX &lt;- cbind(\n  baseline = 1,\n  obese    = sample.int(2, size(model_comor), replace = TRUE) - 1\n  )\n\n# Looking at the data\nhead(X)\n\n     baseline obese\n[1,]        1     0\n[2,]        1     0\n[3,]        1     1\n[4,]        1     0\n[5,]        1     0\n[6,]        1     1\n\n\nLet’s now link agents’ data to the model. This will allow us to use the data to model the probability of recovery.\n\n# Adding the data to the model\nset_agents_data(model_comor, X)\nmodel_comor\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Exposed-Infected-Removed (SEIR) (connected)\nPopulation size     : 10000\nAgents' data loaded : yes (2 columns/features)\nNumber of entities  : 0\nDays (duration)     : 0 (of 0)\nNumber of variants  : 1\nLast run elapsed t  : -\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - Flu (baseline prevalence: 0.10%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Avg. Incubation days : 7.0000\n - Contact rate         : 2.1000\n - Prob. Recovery       : 0.2500\n - Prob. Transmission   : 0.5000\n\n\nWe then use the virus_fun_logit to create a function we can use to model the probability of recovery. The function takes in the following arguments:\n\nvars: the variables to use in the model\ncoefs: the coefficients for each variable\nmodel: the model object\n\n\n# Logit function \nlfun &lt;- virus_fun_logit(\n  vars  = 0:1,\n  coefs = c(\n    qlogis(.25),\n    qlogis(.25 - .25/2)\n    ), \n  model_comor\n  )\n\n# Printing\nlfun\n\nAn epiworld_virus_function object.\n(model: Susceptible-Exposed-Infected-Removed (SEIR) (connected))\nThis function was built using -virus_fun_logit()-. and it features the following coefficients:\n  0: -1.10\n  1: -1.95 \n\n\nThe next step is to set the probability of recovery function for the virus. We can do this using the set_prob_recovery_fun function:\n\n# Setting the probability of recovery\nset_prob_recovery_fun(\n  virus = get_virus(model_comor, 0), \n  model = model_comor,\n  vfun  = lfun\n  )\n\nVirus          : Flu\nId             : 0\nstatus_init    : 1\nstatus_post    : 3\nstatus_removed : 3\nqueue_init     : 2\nqueue_post     : -2\nqueue_removed  : -99\n\n\nWe are now ready to run the model.\n\nrun(model_comor, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nrun(model_no_comor, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\n\nAnd see the result\n\nop &lt;- par(mfrow = c(1, 2), cex = .7)\nplot_incidence(model_comor, main = \"With comorbidities\")\nplot_incidence(model_no_comor, main = \"Without comorbidities\")\n\n\n\npar(op)\n\nLet’s also look at the states of the agents in the model using the get_state() and get_agents() functions.\n\nstates_comor &lt;- sapply(1:size(model_comor), \\(i) {\n  get_state(get_agents(model_comor)[i - 1])\n})\n\nstates_no_comor &lt;- sapply(1:size(model_comor), \\(i) {\n  get_state(get_agents(model_no_comor)[i - 1])\n})\n\ntable(states_comor, states_no_comor)\n\n            states_no_comor\nstates_comor    0    1    2    3\n           0    2    1    3    8\n           1   78  156  113  382\n           2  331  595  452 1592\n           3  641 1348  872 3426\n\n# We can even compute the correlation\nt.test(X[,2],\n  (states_no_comor &lt; 3) - \n  (states_comor &lt; 3)\n  )\n\n\n    Welch Two Sample t-test\n\ndata:  X[, 2] and (states_no_comor &lt; 3) - (states_comor &lt; 3)\nt = 48.931, df = 18225, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 0.4003917 0.4338083\nsample estimates:\nmean of x mean of y \n   0.5050    0.0879 \n\n\nThe table above shows that the model with comorbidities has fewer recovered agents than the model without comorbidities. Furthermore, the model with no comorbidities still has susceptible agents, which is not the case for the model with comorbidities."
  },
  {
    "objectID": "part2.html#exercise-1",
    "href": "part2.html#exercise-1",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Exercise 1",
    "text": "Exercise 1\nUsing a SIR-connected model to simulate the Flu for 75 days, add the Coronavirus Delta variant to the model. Then plot the model parameters and reproductive numbers over time for both viruses. Assume n = 10000, prevalence = 0.0001, contact_rate = 2.1, prob_transmission = 0.5, and prob_recovery = \\(\\frac{1}{4}\\) for model initialization. Assume the Delta variant has a prob_infecting = 0.3, prob_recovery = \\(\\frac{1}{4}\\), and an initial prevalence = 0.001.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nmodel_sir &lt;- ModelSIRCONN(\n  name              = \"Flu\",\n  n                 = 10000, \n  prevalence        = 0.0001, \n  contact_rate      = 2.1,\n  prob_transmission = 0.5,\n  prob_recovery     = 1/4\n  )\n\n# Building the virus\ndelta &lt;- virus(name = \"Delta\", prob_infecting = .3, prob_recovery = 1/4)\n\n# Adding the virus to the model\nadd_virus(model_sir, delta, .001)\n\n# Run the model\nrun(model_sir, ndays = 75, seed = 1912)\n\n_________________________________________________________________________\nRunning the model...\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\n# Reproductive number \nrepnum &lt;- get_reproductive_number(model_sir)\n\n# Plotting\nop &lt;- par(mfrow = c(2,1))\nplot(model_sir)\nplot(repnum, type=\"b\")\n\n\n\npar(op)"
  },
  {
    "objectID": "part2.html#exercise-2",
    "href": "part2.html#exercise-2",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Exercise 2",
    "text": "Exercise 2\nUsing the SIR-connected model from exercise 1 (model_sir), remove the Delta variant from the model and add a masking tool called “mask_wearing” with transmission reduction = 0.3 and proportion of complying agents = 0.6. Simulate this scenario for 50 days and plot the model parameters and average reproductive number over time.\n\n\n\n\n\n\nTip\n\n\n\n\n\nMasking only influences the transmission of a disease, thus transmission reduction = 0.3, and all other parameters of this tool will be 0.0.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Removing Delta variant\nrm_virus(model_sir, 1)\n\n# Creating a tool\nmask_wearing &lt;- tool(\n  name = \"Mask\",\n  susceptibility_reduction = 0.0,\n  transmission_reduction   = 0.3, # Only transmission\n  recovery_enhancer        = 0.0,\n  death_reduction          = 0.0\n)\n\n# Adding tool to the model\nadd_tool(model_sir, mask_wearing, 0.6)\n\n# Running the model\nrun(model_sir, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\n# Reproductive number\nrepnum2 &lt;- get_reproductive_number(model_sir)\n\n# Plotting\nop &lt;- par(mfrow = c(2,1))\nplot(model_sir)\nplot(repnum2, type=\"b\")\n\n\n\npar(op)"
  },
  {
    "objectID": "part2.html#using-tools",
    "href": "part2.html#using-tools",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Using tools",
    "text": "Using tools\nNow, the implementation of tools to fight any viruses and variants in the model will be demonstrated. First, for simplicity, remove the flu virus from the SIR model object (keep in mind the index for the flu virus in the model object is 1). Next, provide parameters for the new tool using the “tool” function. These parameters include the tool’s name, any reduction in probabilities for the SIR model parameters, and increased probability of recovery option. To add the tool to the SIR model, use the add_tool function with the SIR model object, new tool, and prevalence of the tool. In this example, assume that 50% of the population will have received the vaccination.\n\n# Removing the flu virus from the model\nrm_virus(model_sir, 1)\n\nvaccine &lt;- tool(\n  name = \"Vaccine\",\n  susceptibility_reduction = .9,\n  transmission_reduction = .5,\n  recovery_enhancer = .5, \n  death_reduction = .9\n)\n\nadd_tool(model_sir, vaccine, 0.5)\nrun(model_sir, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\n\n\nPlotting\n\nrepnum3 &lt;- get_reproductive_number(model_sir)\n\nop &lt;- par(mfrow = c(2,1))\nplot(model_sir)\nplot(repnum3, type=\"b\")\n\n\n\npar(op)"
  }
]