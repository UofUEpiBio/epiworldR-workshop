[
  {
    "objectID": "diffusion_exercise.html",
    "href": "diffusion_exercise.html",
    "title": "Diffusion Exercise",
    "section": "",
    "text": "Create a diffusion network model which simulates the diffusion of a rumor throughout the UKfaculty population of size n = 81. Use set.seed(2223).\n\nCodeset.seed(2223)\n\n# First, load in the dataset\nlibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\nCodedata(UKfaculty, package=\"igraphdata\")\nn &lt;- igraph::vcount(UKfaculty)\n\n# Turning the network into an edgelist\nlibrary(epiworldR)\nUKfaculty_vertex_data &lt;- as_data_frame(UKfaculty, what = c(\"vertices\"))\nUKfaculty_matrix &lt;- as.matrix(UKfaculty_vertex_data)\nUKfaculty_edgelist &lt;- as_edgelist(UKfaculty)\nlibrary(netplot)\n\nLoading required package: grid\n\n\n\nAttaching package: 'netplot'\n\n\nThe following object is masked from 'package:igraph':\n\n    ego\n\nCodenplot(UKfaculty)\n\n\n\nCode# Simulate a 2 col numeric matrix and use for data in next function\n# Creating the diffusion model\nadopt_rumor &lt;- ModelDiffNet(\n  \"Rumor\",\n  prevalence = .05,\n  prob_adopt = .1,\n  data       = UKfaculty_matrix,\n  params     = c(1, 4)\n)\n\ng &lt;- matrix(runif(n ^ 2) &lt; .01, nrow = n)\ndiag(g) &lt;- FALSE\nel &lt;- which(g, arr.ind = TRUE) - 1L\n\n# Simulating a population from smallworld - Use agents_from_edgelist\nagents_from_edgelist(adopt_rumor,\n                     source = el[,1],\n                     target = el[,2],\n                     size = n, \n                     directed = TRUE)\n\n# Running the model for 50 steps\nrun(adopt_rumor, 50)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCode# Plotting the model\nplot(adopt_rumor)"
  },
  {
    "objectID": "part3.html",
    "href": "part3.html",
    "title": "Part 3: Multiple Runs",
    "section": "",
    "text": "The purpose of the run_multiple function is to run a specified number of simulations using the same model object. That is, this function makes it possible to compare model results across several separate and repeated simulations."
  },
  {
    "objectID": "part3.html#introduction",
    "href": "part3.html#introduction",
    "title": "Part 3: Multiple Runs",
    "section": "",
    "text": "The purpose of the run_multiple function is to run a specified number of simulations using the same model object. That is, this function makes it possible to compare model results across several separate and repeated simulations."
  },
  {
    "objectID": "part3.html#the-principle-behind-multiple-runs",
    "href": "part3.html#the-principle-behind-multiple-runs",
    "title": "Part 3: Multiple Runs",
    "section": "The Principle Behind Multiple Runs",
    "text": "The Principle Behind Multiple Runs\n\n\n\n\n\nIn statistics, the Law of Large Numbers ensures that as the sample size increases, the sample mean (average) of a random variable will converge to the population mean. The same principle applies when using multiple runs to simulate epidemiological models. As the number of epiworldR simulations increases, the sample means of the reproductive number or model parameters, for example, will converge to their corresponding population means."
  },
  {
    "objectID": "part3.html#example-simulating-a-seirconn-model-500-times",
    "href": "part3.html#example-simulating-a-seirconn-model-500-times",
    "title": "Part 3: Multiple Runs",
    "section": "Example: Simulating a SEIRCONN Model 500 Times",
    "text": "Example: Simulating a SEIRCONN Model 500 Times\nSetup and Running Model\nTo use the run_multiple function in epiworldR, create your epiworldR_model of choice; in this case, the example uses a SEIRCONN model for Measles, 10000 people, an initial prevalence of 0.0001 (0.01%), a contact rate of 2, probability of transmission 0.5, a total of 7 incubation days, and probability of recovery \\(\\frac{1}{7}\\).\n\nCodelibrary(epiworldR)\nmodel_seirconn &lt;- ModelSEIRCONN(\n  name              = \"Measles\",\n  n                 = 5000, \n  prevalence        = 0.001, \n  contact_rate      = 2,\n  transmission_rate = 0.5,\n  incubation_days   = 7,\n  recovery_rate     = 1/7\n  )\n\n\nGenerating a Saver\nNext, generate a saver for the purpose of extracting the total_hist and reproductive information from the model object. Keep in mind that you can generate a saver for any metric compatible with the make_saver function (see details section of the make_saver help manual).\n\nCode# Generating a saver\n# ?make_saver\nsaver &lt;- make_saver(\"total_hist\", \"reproductive\")\n\n\nRunning the Simulation\nNow, use the run_multiple function with the model object, number of desired days to run the simulation, number of simulations to run, the generated saver, and number of threads for parallel computing.\n\nCode# Running and printing\nrun_multiple(model_seirconn, ndays = 50, nsims = 500, saver = saver, nthread = 4)\n\nStarting multiple runs (500) using 4 thread(s)\n_________________________________________________________________________\n_________________________________________________________________________\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\n\nExtracting Results\nUsing the run_multiple_get_results function, extract the results from the model object that was simulated 500 times for comparison across simulations.\n\nCodehead(run_multiple_get_results(model_seirconn)$total_hist)\n\n  sim_num date nviruses       state counts\n1       1    0        1 Susceptible   4995\n2       1    0        1     Exposed      5\n3       1    0        1    Infected      0\n4       1    0        1   Recovered      0\n5       1    1        1 Susceptible   4995\n6       1    1        1     Exposed      5\n\nCodehead(run_multiple_get_results(model_seirconn)$reproductive)\n\n  sim_num virus_id   virus source source_exposure_date rt\n1       1        0 Measles    237                   50  0\n2       1        0 Measles    440                   50  0\n3       1        0 Measles    494                   50  0\n4       1        0 Measles    708                   50  0\n5       1        0 Measles   1111                   50  0\n6       1        0 Measles   1373                   50  0\n\n\nPlotting\nTo plot the model parameters and reproductive numbers over time using boxplots, extract the results from the model object using run_multiple_get_results. For this example, the dates are filtered to observe the model parameters over the first 20 days. Notice each boxplot in the below table represents the observed values from each of the 500 simulations for each date.\n\nCodeseirconn_500 &lt;- run_multiple_get_results(model_seirconn)$total_hist\nseirconn_500 &lt;- seirconn_500[seirconn_500$date &lt;= 20,]\nplot(seirconn_500)\n\n\n\n\nTo view the a plot of the reproductive number over all 50 days for each of the 500 simulations, store the reproductive results to a new object using run_multiple_get_results, then plot using the plot function. Notice each source exposure date displays a boxplot representing the distribution of reproductive numbers across all 500 simulations for each date. As expected, the reproductive number on average, decreases over time.\n\nCodeseirconn_500_r &lt;- run_multiple_get_results(model_seirconn)$reproductive\nplot(seirconn_500_r)"
  },
  {
    "objectID": "part3.html#exercise-1",
    "href": "part3.html#exercise-1",
    "title": "Part 3: Multiple Runs",
    "section": "Exercise 1",
    "text": "Exercise 1\nConsider for this exercise that there is a Hepatitis A outbreak. Your goal is to observe the average reproductive number over 100 simulations. Using a run_multiple simulation, what is the average reproductive number over the course of the first 20 days? Use a SEIRCONN model with:\n- n = 10000\n- prevalence = 0.01\n- contact_rate = 2\n- transmission_rate = 0.5\n- incubation_days = 2\n- recovery_rate = \\(\\frac{1}{7}\\)\n\n\n\n\n\n\nTip\n\n\n\n\n\nGeneral Steps:\n1. Create epiworldR_model\n2. Generate saver\n3. Run epiworldR_model\n4. Plot average reproductive number"
  },
  {
    "objectID": "part3.html#exercise-2",
    "href": "part3.html#exercise-2",
    "title": "Part 3: Multiple Runs",
    "section": "Exercise 2",
    "text": "Exercise 2\nUsing the same SEIRCONN model from exercise 1, simulate a vaccine intervention for the previous exercise’s Hepatitis A virus outbreak where 50% of individuals in the population will receive the vaccine on day 10. How then, does the average reproductive number behave over 20 days and 100 simulations? Assume the following parameters:\n- susceptibility_reduction = .9\n- transmission_reduction = .5\n- recovery_enhancer = .5\n- death_reduction = .9\n\n\n\n\n\n\nTip\n\n\n\n\n\nGeneral Steps:\n1. Create tool\n2. Use globalaction_tool & add_global_action\n3. Generate saver & run_multiple\n4. Plot average reproductive number"
  },
  {
    "objectID": "part2.html",
    "href": "part2.html",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "",
    "text": "epiworldR supports multi-variant models, the below code gives instructions on how to implement this. First, build a SIRCONN model for COVID-19, which new viruses and tools will then be added to."
  },
  {
    "objectID": "part2.html#adding-multiple-viruses-variants",
    "href": "part2.html#adding-multiple-viruses-variants",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Adding Multiple Viruses & Variants",
    "text": "Adding Multiple Viruses & Variants\n\nCodelibrary(epiworldR)\nmodel_sir &lt;- ModelSIRCONN(\n  name              = \"COVID-19\",\n  n                 = 50000, \n  prevalence        = 0.0001, \n  contact_rate      = 2,\n  transmission_rate = 0.5,\n  recovery_rate     = 1/3\n  )\nrun(model_sir, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCodemodel_sir\n\n________________________________________________________________________________\nSusceptible-Infected-Removed (SIR) (connected)\nIt features 50000 agents, 1 virus(es), and 0 tool(s).\nThe model has 3 states.\nThe final distribution is: 3364 Susceptible, 0 Infected, and 46636 Recovered.\n\n\nDesigning the Virus\nUsing the virus() function, assign a name to the new virus/variant with its corresponding rate of transmission to any given agent. In this example, prob_infecting = 0.3. In order to add this new virus to the model, use the add_virus() function by calling the original epiworldR model object, the new virus, and the new virus’ prevalence (which is set to 0.0001 in this example).\n\nCode# Building the virus\nflu &lt;- virus(name = \"Flu\", prob_infecting = .3)\n\n# Adding the virus to the model\nadd_virus(model_sir, flu, .0001)\n\n\nNext, run the updated model with the new virus for 50 days, the output below describes the simulation. To confirm that the flu is included, notice the presence of “Flu” in the Virus(es) section of the output. All other output is interpretable as specified in previous sections.\n\nCoderun(model_sir, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCodemodel_sir\n\n________________________________________________________________________________\nSusceptible-Infected-Removed (SIR) (connected)\nIt features 50000 agents, 2 virus(es), and 0 tool(s).\nThe model has 3 states.\nThe final distribution is: 3264 Susceptible, 4 Infected, and 46732 Recovered.\n\n\nPlotting\nPlotting the previous model (including the flu) yields the following. Notice the presence of two reproductive numbers plotted over time. Variant 0 refers to COVID-19 and variant 1 refers to the flu.\n\nCoderepnum2 &lt;- get_reproductive_number(model_sir)\n\nop &lt;- par(mfrow = c(2,1))\nplot(model_sir)\nplot(repnum2, type=\"b\")\n\n\n\nCodepar(op)"
  },
  {
    "objectID": "part2.html#using-tools",
    "href": "part2.html#using-tools",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Using tools",
    "text": "Using tools\nNow, the implementation of tools to fight any viruses and variants in the model will be demonstrated. First, remove the flu virus from the SIRCONN model object (keep in mind the index for the flu virus in the model object is 1). Next, provide parameters for the new tool using the tool() function. These parameters include the tool’s name, any reduction in probabilities for the SIRCONN model parameters, and increased probability of recovery option. To add the tool to the SIRCONN model, use the add_tool() function with the SIRCONN model object, new tool, and prevalence of the tool. In this example, assume that 50% of the population will have received the vaccination.\n\nCode# Removing the flu virus from the model\nrm_virus(model_sir, 1)\n\nvaccine &lt;- tool(\n  name = \"Vaccine\",\n  susceptibility_reduction = .9,\n  transmission_reduction = .5,\n  recovery_enhancer = .5, \n  death_reduction = .9\n)\n\nadd_tool(model_sir, vaccine, 0.5)\nrun(model_sir, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\n\nPlotting\n\nCoderepnum3 &lt;- get_reproductive_number(model_sir)\n\nop &lt;- par(mfrow = c(2,1))\nplot_incidence(model_sir)\nplot(repnum3, type=\"b\")\n\n\n\nCodepar(op)"
  },
  {
    "objectID": "part2.html#comorbidities-using-logit-functions",
    "href": "part2.html#comorbidities-using-logit-functions",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Comorbidities Using Logit Functions",
    "text": "Comorbidities Using Logit Functions\nMany times we want to model the effects of comorbidities on the disease. For example, we may want to model the effects of obesity on the probability of recovery from COVID-19. To do this, we can use the virus_fun_logit() function to model the probability of recovery.\nThe steps are the following:\n\nCreate the model\nAssign the agents’ data (a matrix with covariates/features) to the model.\nCreate a function to model the probability of recovery using the virus_fun_logit() function.\nAdd the function to the virus’ recovery rate using set_prob_recovery_fun().\nRun the model.\n\nWe start by creating two matching models, one with comorbidities and one without.\n\nCode# With comorbidities\nmodel_comor &lt;- ModelSEIRCONN(\n  name              = \"Flu\",\n  n                 = 10000, \n  prevalence        = 0.001, \n  contact_rate      = 2.1,\n  transmission_rate = 0.5,\n  incubation_days   = 7,\n  recovery_rate     = 1/4\n  )\n\n# Without comorbidities\nmodel_no_comor &lt;- ModelSEIRCONN(\n  name              = \"Flu\",\n  n                 = 10000, \n  prevalence        = 0.001, \n  contact_rate      = 2.1,\n  transmission_rate = 0.5,\n  incubation_days   = 7,\n  recovery_rate     = 1/4\n  )\n\n\nNext, we will create a matrix with the agents’ data. As an example, we will create a matrix with two columns, one for the baseline and one for obesity.\n\nCode# Artificial population with obesity\nset.seed(88)\nX &lt;- cbind(\n  baseline = 1,\n  obese    = sample.int(2, size(model_comor), replace = TRUE) - 1\n  )\n\n# Looking at the data\nhead(X)\n\n     baseline obese\n[1,]        1     0\n[2,]        1     0\n[3,]        1     1\n[4,]        1     0\n[5,]        1     0\n[6,]        1     1\n\n\nLet’s now link agents’ data to the model. This will allow us to use the data to model the probability of recovery.\n\nCode# Adding the data to the model\nset_agents_data(model_comor, X)\nmodel_comor\n\n________________________________________________________________________________\nSusceptible-Exposed-Infected-Removed (SEIR) (connected)\nIt features 10000 agents, 1 virus(es), and 0 tool(s).\nThe model has 4 states. The model hasn't been run yet.\n\n\nWe then use virus_fun_logit() to create a function we can use to model the probability of recovery. The function takes in the following arguments:\n\n\nvars: the variables to use in the model\n\ncoefs: the coefficients for each variable\n\nmodel: the model object\n\n\nCode# Logit function \nlfun &lt;- virus_fun_logit(\n  vars  = 0:1,\n  coefs = c(\n    qlogis(.25),\n    qlogis(.25 - .25/2)\n    ), \n  model_comor\n  )\n\n# Printing\nlfun\n\nAn epiworld_virus_function object.\n(model: Susceptible-Exposed-Infected-Removed (SEIR) (connected))\nThis function was built using -virus_fun_logit()-. and it features the following coefficients:\n  0: -1.10\n  1: -1.95 \n\n\nThe next step is to set the probability of recovery function for the virus. We can do this using the set_prob_recovery_fun() function:\n\nCode# Setting the probability of recovery\nset_prob_recovery_fun(\n  virus = get_virus(model_comor, 0), \n  model = model_comor,\n  vfun  = lfun\n  )\n\n\nWe are now ready to run the model.\n\nCoderun(model_comor, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCoderun(model_no_comor, ndays = 50, seed = 1231)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\n\nAnd see the result\n\nCodeop &lt;- par(mfrow = c(1, 2), cex = .7)\nplot_incidence(model_comor, main = \"With comorbidities\")\nplot_incidence(model_no_comor, main = \"Without comorbidities\")\n\n\n\nCodepar(op)\n\n\nLet’s also look at the states of the agents in the model using the get_state() and get_agents() functions.\n\nCodestates_comor &lt;- sapply(1:size(model_comor), \\(i) {\n  get_state(get_agents(model_comor)[i - 1])\n})\n\nstates_no_comor &lt;- sapply(1:size(model_comor), \\(i) {\n  get_state(get_agents(model_no_comor)[i - 1])\n})\n\ntable(states_comor, states_no_comor)\n\n            states_no_comor\nstates_comor    0    1    2    3\n           0    2    1    3    8\n           1   78  156  113  382\n           2  331  595  452 1592\n           3  641 1348  872 3426\n\nCode# We can even compute the correlation\nt.test(X[,2],\n  (states_no_comor &lt; 3) - \n  (states_comor &lt; 3)\n  )\n\n\n    Welch Two Sample t-test\n\ndata:  X[, 2] and (states_no_comor &lt; 3) - (states_comor &lt; 3)\nt = 48.931, df = 18225, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 0.4003917 0.4338083\nsample estimates:\nmean of x mean of y \n   0.5050    0.0879 \n\n\nThe table above shows that the model with comorbidities has fewer recovered agents than the model without comorbidities. Furthermore, the model with no comorbidities still has susceptible agents, which is not the case for the model with comorbidities."
  },
  {
    "objectID": "part2.html#network-diffusion",
    "href": "part2.html#network-diffusion",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Network Diffusion",
    "text": "Network Diffusion\nepiworldR also supports diffusion networks to simulate the spread of ideas or rumors throughout a population, for example. The below example demonstrates this capability.\nExample\nGoal: Create a diffusion network model which simulates the spread of a rumor throughout the UKfaculty population of size n = 81.\n\nCode# First, load in the dataset using the igraph library\n# library(igraph)\ndata(UKfaculty, package=\"igraphdata\")\n\n# Visualizing the Network\n# library(netplot)\nnplot(UKfaculty)\n\n\n\n\nThe above plot visualizes the UK faculty network of size 81 and its interaction patterns.\n\nCodeset.seed(2223)\n\n# Turning the network into an edgelist\nUKfaculty_vertex_data &lt;- as_data_frame(UKfaculty, what = c(\"vertices\"))\nUKfaculty_matrix &lt;- as.matrix(UKfaculty_vertex_data)\nUKfaculty_edgelist &lt;- as_edgelist(UKfaculty)\n\n# Simulate a 2 column numeric matrix and use for data in ModelDiffNet\n# Creating the diffusion model\nlibrary(epiworldR)\nadopt_rumor &lt;- ModelDiffNet(\n  \"Rumor\",\n  prevalence = .08,\n  prob_adopt = .1,\n  data       = UKfaculty_matrix,\n  params     = c(1, 4)\n)\n\nn &lt;- igraph::vcount(UKfaculty)\ng &lt;- matrix(runif(n ^ 2) &lt; .01, nrow = n)\ndiag(g) &lt;- FALSE\nel &lt;- which(g, arr.ind = TRUE) - 1L\n\n# Simulating a population from smallworld - Use agents_from_edgelist\nagents_from_edgelist(adopt_rumor,\n                     source = el[,1],\n                     target = el[,2],\n                     size = n, \n                     directed = TRUE)\n\n# Running the model for 50 steps\nrun(adopt_rumor, 50)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCode# Plotting the model\nplot(adopt_rumor)\n\n\n\n\nThe number of rumor-adopters steadily increases over time as the number of rumor non-adopters decreases, an expected result when considering a social network."
  },
  {
    "objectID": "part2.html#exercise-1",
    "href": "part2.html#exercise-1",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Exercise 1",
    "text": "Exercise 1\nUsing a SIRCONN model to simulate the Flu for 75 days, add the Coronavirus Delta variant to the model. Then plot the model parameters and reproductive numbers over time for both viruses.\nAssume the following for model initialization:\nn = 10000\nprevalence = 0.0001\ncontact_rate = 2.1\ntransmission_rate = 0.5\nrecovery_rate = \\(\\frac{1}{4}\\)\nAssume the Delta variant has:\nprob_infecting = 0.3\nrecovery_rate = \\(\\frac{1}{4}\\)\nprevalence = 0.001\nWhen running the model, use seed = 1912\nAfter how many days does the number of infections peak in this simulation? How many infections occur at the peak?"
  },
  {
    "objectID": "part2.html#exercise-2",
    "href": "part2.html#exercise-2",
    "title": "Part 2: Adding Multiple Diseases & Tools",
    "section": "Exercise 2",
    "text": "Exercise 2\nUsing the SIRCONN model from exercise 1 (model_sir), remove the Delta variant from the model and add a masking tool called “mask_wearing” with transmission reduction = 0.3 and proportion of complying agents = 0.6. Simulate this scenario for 50 days and plot the model parameters and average reproductive number over time. When running the model, set seed = 1912.\nAfter how many days does the number of infections peak in this simulation?\nHow many infections occur at the peak?\n\n\n\n\n\n\nTip\n\n\n\n\n\nMasking only influences the transmission of a disease, thus transmission reduction = 0.3, and all other parameters of this tool will be 0.0."
  },
  {
    "objectID": "build.html",
    "href": "build.html",
    "title": "epiworldR - Sunbelt 2023 Workshop",
    "section": "",
    "text": "To build the website from the command line: - Type: quarto preview . - To ensure that git is installed: module load quarto"
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "This R package includes several popular epidemiological models, including SIS (wiki), SIR (wiki), and SEIR (wiki) using either a fully connected graph (similar to a compartmental model) or a user-defined network. Here are some examples:"
  },
  {
    "objectID": "examples.html#sir-model-using-a-random-graph",
    "href": "examples.html#sir-model-using-a-random-graph",
    "title": "Examples",
    "section": "SIR Model Using a Random Graph",
    "text": "SIR Model Using a Random Graph\nThis Susceptible-Infected-Recovered model features a population of 100,000 agents simulated in a small-world network. Each agent is connected to ten other agents. One percent of the population has the virus, with a 70% chance of transmission. Infected individuals recover at a 0.3 rate:\n\nCodelibrary(epiworldR)\n\n## Creating a SIR model\nsir &lt;- ModelSIR(\n  name           = \"COVID-19\",\n  prevalence     = .01,\n  infectiousness = .7,\n  recovery       = .3\n  ) |&gt;\n  # Adding a Small world population \n  agents_smallworld(n = 100000, k = 10, d = FALSE, p = .01) |&gt;\n  # Running the model for 50 days\n  run(ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCodesir\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Recovered (SIR)\nPopulation size     : 100000\nAgents' data        : (none)\nNumber of entities  : 0\nDays (duration)     : 50 (of 50)\nNumber of variants  : 1\nLast run elapsed t  : 517.00ms\nLast run speed      : 9.65 million agents x day / second\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 1.00%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Infectiousness    : 0.7000\n - Prob. of Recovery : 0.3000\n\nDistribution of the population at time 50:\n  - (0) Susceptible :  99000 -&gt; 822\n  - (1) Infected    :   1000 -&gt; 415\n  - (2) Recovered   :      0 -&gt; 98763\n\nTransition Probabilities:\n - Susceptible  0.91  0.09  0.00\n - Infected     0.00  0.70  0.30\n - Recovered    0.00  0.00  1.00\n\n\nVisualizing the outputs\n\nCodeplot(sir)"
  },
  {
    "objectID": "examples.html#seir-model-with-a-fully-connected-graph",
    "href": "examples.html#seir-model-with-a-fully-connected-graph",
    "title": "Examples",
    "section": "SEIR Model With a Fully Connected Graph",
    "text": "SEIR Model With a Fully Connected Graph\n\nCodemodel_seirconn &lt;- ModelSEIRCONN(\n  name                = \"COVID-19\",\n  prevalence          = 0.01, \n  n                   = 10000,\n  contact_rate        = 4, \n  incubation_days     = 7, \n  prob_transmission   = 0.6,\n  prob_recovery       = 0.5\n)\n\nset.seed(132)\nrun(model_seirconn, ndays = 100)\n\n_________________________________________________________________________\nRunning the model...\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\nCodemodel_seirconn\n\n\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Exposed-Infected-Removed (SEIR) (connected)\nPopulation size     : 10000\nAgents' data        : (none)\nNumber of entities  : 0\nDays (duration)     : 100 (of 100)\nNumber of variants  : 1\nLast run elapsed t  : 206.00ms\nLast run speed      : 4.84 million agents x day / second\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 1.00%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Avg. Incubation days : 7.0000\n - Contact rate         : 4.0000\n - Prob. Recovery       : 0.5000\n - Prob. Transmission   : 0.6000\n\nDistribution of the population at time 100:\n  - (0) Susceptible :  9900 -&gt; 91\n  - (1) Exposed     :   100 -&gt; 0\n  - (2) Infected    :     0 -&gt; 0\n  - (3) Recovered   :     0 -&gt; 9909\n\nTransition Probabilities:\n - Susceptible  0.96  0.04  0.00  0.00\n - Exposed      0.00  0.85  0.15  0.00\n - Infected     0.00  0.00  0.49  0.51\n - Recovered    0.00  0.00  0.00  1.00\n\n\nComputing some key statistics: plotting and reproductive number (wiki)\n\nCodeplot(model_seirconn)\n\n\n\nCoderepnum &lt;- get_reproductive_number(model_seirconn)\nplot(repnum, type = \"b\")"
  },
  {
    "objectID": "examples.html#sir-logit",
    "href": "examples.html#sir-logit",
    "title": "Examples",
    "section": "SIR Logit",
    "text": "SIR Logit\n\nCodeset.seed(2223)\nn &lt;- 100000\n\nX &lt;- cbind(\n  Intercept = 1,\n  Female    = sample.int(2, n, replace = TRUE) - 1\n  )\n\ncoef_infect  &lt;- c(.1, -2, 2)\ncoef_recover &lt;- rnorm(2)\n\nmodel_logit &lt;- ModelSIRLogit(\n  \"covid2\",\n  data = X,\n  coefs_infect      = coef_infect,\n  coefs_recover     = coef_recover, \n  coef_infect_cols  = 1L:ncol(X),\n  coef_recover_cols = 1L:ncol(X),\n  prob_infection = .8,\n  prob_recovery = .3,\n  prevalence = .01\n)\n\nagents_smallworld(model_logit, n, 8, FALSE, .01)\n\nrun(model_logit, 50)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCodeplot(model_logit)\n\n\n\nCode## Females are supposed to be more likely to become infected\nrn &lt;- get_reproductive_number(model_logit)\n\n(table(\n  X[, \"Female\"],\n  (1:n %in% rn$source)\n) |&gt; prop.table())[,2]\n\n      0       1 \n0.12984 0.14201 \n\nCode## Looking into the agents\nget_agents(model_logit)\n\nAgents from the model \"Susceptible-Infected-Removed (SIR) (logit)\":\nAgent: 0, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 1, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 2, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 3, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 4, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 5, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 6, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 7, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 8, state: Susceptible (0), Nvirus: 0, NTools: 0, NNeigh: 8\nAgent: 9, state: Recovered (2), Nvirus: 0, NTools: 0, NNeigh: 8\n... 99990 more agents ..."
  },
  {
    "objectID": "examples.html#transmission-network",
    "href": "examples.html#transmission-network",
    "title": "Examples",
    "section": "Transmission Network",
    "text": "Transmission Network\n\nCodesir &lt;- ModelSIR(\n  name           = \"COVID-19\",\n  prevalence     = .01,\n  infectiousness = .5,\n  recovery       = .5\n  ) |&gt;\n    # Adding a Small world population \n    agents_smallworld(n = 500, k = 10, d = FALSE, p = .01) |&gt;\n    # Running the model for 50 days\n    run(ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCode## Transmission network\nnet &lt;- get_transmissions(sir)\n\n## Plotting\nlibrary(netplot)\n\nLoading required package: grid\n\nCodelibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following object is masked from 'package:netplot':\n\n    ego\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\nCodex &lt;- graph_from_edgelist(as.matrix(net[,2:3]) + 1)\n\nnplot(x, edge.curvature = 0, edge.color = \"gray\", skip.vertex=TRUE)"
  },
  {
    "objectID": "examples.html#multiple-simulations",
    "href": "examples.html#multiple-simulations",
    "title": "Examples",
    "section": "Multiple Simulations",
    "text": "Multiple Simulations\n\nCodemodel_sir &lt;- ModelSIRCONN(\n  name = \"COVID-19\",\n  prevalence = 0.01,\n  n = 1000,\n  contact_rate = 2,\n  prob_transmission = 0.9, prob_recovery = 0.1\n  )\n\n## Generating a saver\nsaver &lt;- make_saver(\"total_hist\", \"reproductive\")\n\n## Running and printing\nrun_multiple(model_sir, ndays = 100, nsims = 50, saver = saver, nthread = 2)\n\nStarting multiple runs (50) using 2 thread(s)\n_________________________________________________________________________\n_________________________________________________________________________\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\nCode## Retrieving the results\nans &lt;- run_multiple_get_results(model_sir)\n\nhead(ans$total_hist)\n\n  sim_num thread date nvariants       state counts\n1       1      0    0         1 Susceptible    990\n2       1      0    0         1    Infected     10\n3       1      0    0         1   Recovered      0\n4       1      0    1         1 Susceptible    974\n5       1      0    1         1    Infected     25\n6       1      0    1         1   Recovered      1\n\nCodehead(ans$reproductive)\n\n  sim_num thread variant source source_exposure_date rt\n1       1      0       0    767                   11  0\n2       1      0       0    835                   10  0\n3       1      0       0    466                    9  0\n4       1      0       0    612                    9  0\n5       1      0       0    793                    9  0\n6       1      0       0     20                    8  0\n\nCodeplot(ans$reproductive)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "epiworldR Sunbelt 2023 Workshop",
    "section": "",
    "text": "Codelibrary(epiworldR)\n\n# Creating a model\nmymodel &lt;- ModelSEIRCONN(\n  name = \"Nasty virus\", n = 10000, prevalence = .001, contact_rate = 4,\n  transmission_rate = .4, incubation_days = 7, recovery_rate = 1/7\n) |&gt; verbose_off() \n\n# Adding a virus\nadd_virus(mymodel, virus(\"Nasty virus 2\", .5, .3), proportion = .001)\n\n# Renaming the model\nset_name(mymodel, mname = \"SEIR COVID-19 model\")\n\n# Running the model\nset.seed(8383)\nrun(mymodel, ndays = 100)\n\nop &lt;- par(mfrow = c(2, 2), mar = par()$mar * c(1, 1, 1/2, 0))\nplot(mymodel)\nplot_reproductive_number(mymodel)\nplot_incidence(mymodel)\nplot_generation_time(mymodel)\npar(op)\n\n\n\nFigure 1: ?(caption)\nThe epiworldR R package is a wrapper of the C++ library epiworld. It provides a general framework for modeling disease transmission using agent-based models wiki. Some main features include:"
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "epiworldR Sunbelt 2023 Workshop",
    "section": "Schedule",
    "text": "Schedule\nThank you for joining the epiworldR workshop at the Sunbelt 2023 conference. Our schedule for today is as follows:\n\nSetup (10 min)\n\nPart 1: Basic modeling (50 min)\nBreak (10 min)\n\nPart 2: Adding multiple diseases & tools (50 min)\n\nBreak (10 min)\n\nPart 3: Multiple runs (50 min)\n\nYou are welcome to use your personal computer, but we also have an online RStudio server available for you to use.1"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "epiworldR Sunbelt 2023 Workshop",
    "section": "Installation",
    "text": "Installation\nYou can install the development version of epiworldR from GitHub with:\n\nCode# install.packages(\"devtools\")\ndevtools::install_github(\"UofUEpiBio/epiworldR\")"
  },
  {
    "objectID": "index.html#agent-based-modeling",
    "href": "index.html#agent-based-modeling",
    "title": "epiworldR Sunbelt 2023 Workshop",
    "section": "Agent-Based Modeling",
    "text": "Agent-Based Modeling\nAgent-based modeling (ABM) is a powerful computational approach that enables the simulation and analysis of complex systems by representing individual agents and their interactions within an environment. ABM provides a bottom-up perspective, allowing for the examination of emergent phenomena arising from the collective behavior of autonomous agents. By capturing the heterogeneity, autonomy, and adaptive nature of agents, ABM offers a versatile tool for investigating various domains, including social sciences, economics, biology, and epidemiology, offering valuable insights into the dynamics and patterns that emerge from the interactions of individual entities within a larger system."
  },
  {
    "objectID": "index.html#terminology",
    "href": "index.html#terminology",
    "title": "epiworldR Sunbelt 2023 Workshop",
    "section": "Terminology",
    "text": "Terminology\nepiworldR focuses heavily on epidemiological applications to social networking. Below are some common terms that will be used throughout.\nSEIR, SIR, SIS, etc.:\nThese are epidemiological models that are used to analyze the spread and dynamics of diseases in a population. These models are a combination or selection of the states susceptible, exposed, infected, and/or recovered, in which all individuals in a population can be categorized in.\nSEIR connected (SEIRCONN), SIR connected (SIRCONN), etc.:\nThese are epidemiological models that are similar to their above counterparts (SEIR, SIR, etc.), but with the assumption that each individual agent is connected to all other agents.\nReproductive number:\nThe average number of secondary transmissions from one infected person. For example, a reproductive number of 2.0 indicates that one infected person transmits the disease to two other people in the population on average.\nIncidence:\nThe the occurrence of new cases of disease or injury in a population over a specified period of time. Specifically, daily incidence is computed in epiworldR."
  },
  {
    "objectID": "index.html#about-the-instructors",
    "href": "index.html#about-the-instructors",
    "title": "epiworldR Sunbelt 2023 Workshop",
    "section": "About the instructors",
    "text": "About the instructors\nDr. George G. Vega Yon is a Research Assistant Professor of Epidemiology at the Department of Internal Medicine at the University of Utah.\nDerek S. Meyer is a Research Assistant and M.Stat. student in Biostatistics at the Department of Internal Medicine at the University of Utah."
  },
  {
    "objectID": "part1.html",
    "href": "part1.html",
    "title": "Part 1: Basic Modeling",
    "section": "",
    "text": "epiworldR is an R package that provides a fast (C++ backend) and highly-customizable framework for building network-based transmission/diffusion agent-based models [ABM]. Some key features of epiworldR are the ability to construct multi-disease models (e.g., models of competing multi-pathogens/multi-rumor,) design mutating pathogens, architect population-level interventions, and build models with an arbitrary number of compartments/states (beyond SIR/SEIR.)1\nLet’s start right away with an example!"
  },
  {
    "objectID": "part1.html#motivating-example",
    "href": "part1.html#motivating-example",
    "title": "Part 1: Basic Modeling",
    "section": "Motivating Example",
    "text": "Motivating Example\n\nCodelibrary(epiworldR)\n\n# Create a model\nmodel &lt;- ModelSEIRCONN(\n  name              = \"COVID-19\",\n  n                 = 20000, \n  prevalence        = 0.0001, \n  contact_rate      = 4,\n  incubation_days   = 7,\n  transmission_rate = 0.5,\n  recovery_rate     = 1/7\n  ) |&gt;\n\n  # Adding a virus (Flu)\n  add_virus(virus(\"Flu\", 0.5, 1/4), .0001) |&gt;\n\n  # Individuals wear a mask\n  add_tool(tool(\"Mask\", 0.2, 0.3, 0, 0), .3)\n\n# Creating a vaccine to add on day 20\nvaccine &lt;- tool(\"Vaccine\", .9, .9, .9, 0)\n\n# Adding an intervention on day 20 (Vaccines)\nadd_global_action(model, globalaction_tool(\n  vaccine,\n  prob = .7,\n  day = 20\n  ))\n\n\n\nCode# Run the model\nrun(model, ndays = 100, seed = 1912)\n\n_________________________________________________________________________\nRunning the model...\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n done.\n\nCodemodel\n\n________________________________________________________________________________\nSusceptible-Exposed-Infected-Removed (SEIR) (connected)\nIt features 20000 agents, 2 virus(es), and 2 tool(s).\nThe model has 4 states.\nThe final distribution is: 10771 Susceptible, 153 Exposed, 106 Infected, and 8970 Recovered.\n\n\n\nCode# Plot the model\nop &lt;- par(mfrow = c(2,2))\nplot_incidence(model)\nabline(v = 20, col = \"steelblue\", lwd = 2, lty = 2)\n\nplot_reproductive_number(model)\nabline(v = 20, col = \"steelblue\", lwd = 2, lty = 2)\n\nplot_generation_time(model)\nabline(v = 20, col = \"steelblue\", lwd = 2, lty = 2)\npar(op)"
  },
  {
    "objectID": "part1.html#example-1-simulating-a-sir-model",
    "href": "part1.html#example-1-simulating-a-sir-model",
    "title": "Part 1: Basic Modeling",
    "section": "Example 1: Simulating a SIR model",
    "text": "Example 1: Simulating a SIR model\nSetup and running the model\nThis example implements the following scenario:\n\nThe disease name is specified (COVID-19),\n50,000 agents are initialized,\nthe disease prevalence of 0.0001 is declared,\neach agent will contact two others (contact_rate),\nthe transmission rate of the disease for any given agent is 0.5, and\nthe recovery rate is set to \\(\\frac{1}{3}\\).\n\nTo create this model on epiworldR, we use the ModelSIRCONN() function. From here, the example will take you through the basic features of epiworldR.\n\nCodelibrary(epiworldR)\nmodel_sirconn &lt;- ModelSIRCONN(\n  name              = \"COVID-19\",\n  n                 = 50000, \n  prevalence        = 0.0001, \n  contact_rate      = 2,\n  transmission_rate = 0.5,\n  recovery_rate     = 1/3\n  )\n\n\nPrinting the model shows us some information. First, the name of the model, population size, number of entities (think of these as public spaces in which agents can make social contact with one another), the duration in days, number of variants, amount of time the last replicate took to run (last run elapsed t), and rewiring status (on or off). The next piece of information you will see is a list of the viruses used in the model. In this case, COVID-19 was the only disease used. Note that epiworldR has the capability to include more than one virus in a model. Tool(s) lists any tools that agents have to fight the virus. Examples ofthis may include masking, vaccines, social distancing, etc. In this model, no tools are specified. Lastly, the model parameters are listed, which originate from the parameters specified in the model.\n\nCodemodel_sirconn\n\n________________________________________________________________________________\nSusceptible-Infected-Removed (SIR) (connected)\nIt features 50000 agents, 1 virus(es), and 0 tool(s).\nThe model has 3 states. The model hasn't been run yet.\n\n\nTo execute the model, use the run function with the SIR model object, number of simulation days, and an optional seed for reproducibility. Next, print out the results from the simulated model using model_sir.\n\nCoderun(model_sirconn, ndays = 50, seed = 1912)\n\n_________________________________________________________________________\n|Running the model...\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| done.\n| done.\n\nCodesummary(model_sirconn)\n\n________________________________________________________________________________\n________________________________________________________________________________\nSIMULATION STUDY\n\nName of the model   : Susceptible-Infected-Removed (SIR) (connected)\nPopulation size     : 50000\nAgents' data        : (none)\nNumber of entities  : 0\nDays (duration)     : 50 (of 50)\nNumber of viruses   : 1\nLast run elapsed t  : 409.00ms\nLast run speed      : 6.11 million agents x day / second\nRewiring            : off\n\nGlobal actions:\n (none)\n\nVirus(es):\n - COVID-19 (baseline prevalence: 0.01%)\n\nTool(s):\n (none)\n\nModel parameters:\n - Contact rate      : 2.0000\n - Recovery rate     : 0.3333\n - Transmission rate : 0.5000\n\nDistribution of the population at time 50:\n  - (0) Susceptible : 49995 -&gt; 3364\n  - (1) Infected    :     5 -&gt; 0\n  - (2) Recovered   :     0 -&gt; 46636\n\nTransition Probabilities:\n - Susceptible  0.95  0.05  0.00\n - Infected     0.00  0.64  0.36\n - Recovered    0.00  0.00  1.00\n\n\nThere are two additional sections in the model summary after running the model object summary, the first being the distribution of the population at time 50. This section describes the flow of agents from each state (SIR) after 50 days. The counts for these states will of course, change based on model parameters or simulation run-time. The transmission probabilities section outputs a 3x3 matrix that describes the probability of moving from one state to another. Notice in all cases, there is a probability of 0 to skip states. In other words, it is impossible for an agent to move from the susceptible state to the recovered state; that agent must pass through the infected state in order to then progress to the recovered state. The same logic applies with moving backwards; an agent cannot become susceptible again after being infected.\nExtracting Simulation Data\nAfter running the epiworldR model, below is a list of all the functions that can be called using the epiworldR model object. To demonstrate, start with the basic plot and get_hist_total functions.\n\nCodemethods(class = \"epiworld_model\")\n\n [1] add_tool_n                 add_tool                  \n [3] add_virus_n                add_virus                 \n [5] agents_from_edgelist       agents_smallworld         \n [7] get_hist_tool              get_hist_total            \n [9] get_hist_transition_matrix get_hist_virus            \n[11] get_n_replicates           get_n_tools               \n[13] get_n_viruses              get_name                  \n[15] get_ndays                  get_param                 \n[17] get_reproductive_number    get_states                \n[19] get_today_total            get_transition_probability\n[21] get_transmissions          print                     \n[23] queuing_off                queuing_on                \n[25] run_multiple               run                       \n[27] set_name                   set_param                 \n[29] size                       summary                   \n[31] verbose_off                verbose_on                \nsee '?methods' for accessing help and source code\n\n\nVisualization\n\nCodeplot(model_sirconn)\n\n\n\n\nAs evident from the above plot, the SIR model constructed from epiworldR displays the changes in susceptible, infected, and recovered case counts over time (days). Notice after a certain amount of time, the curves flatten. Below, a table representation of the above plot is printed, complete with each state within the SIR model, date, and agent counts.\n\n\n\n\n\n\nConnected vs Non-connected Models\n\n\n\n\n\nThe above example uses a SIR connected model (ModelSIRCONN()), meaning that all agents in the model are connected with each other. When using a non-connected model (ex.ModelSEIR(), ModelSIR(), etc.), we do not assume that all agents in the model are connected with each other. Thus, a network of agents must be built using the agents_smallworld() function before running the model where:\n- n = number of agents\n- k = number of ties in the small world network\n- d = whether the graph is directed or not\n- p = probability of rewiring"
  },
  {
    "objectID": "part1.html#important-statistics",
    "href": "part1.html#important-statistics",
    "title": "Part 1: Basic Modeling",
    "section": "Important Statistics",
    "text": "Important Statistics\n\nCodehead(get_hist_total(model_sirconn))\n\n  date       state counts\n1    0 Susceptible  49995\n2    0    Infected      5\n3    0   Recovered      0\n4    1 Susceptible  49991\n5    1    Infected      9\n6    1   Recovered      0\n\n\nAn important statistic in epidemiological models is the reproductive number.\n\nCoderepnum &lt;- get_reproductive_number(model_sirconn)\nhead(repnum)\n\n  virus_id    virus source source_exposure_date rt\n1        0 COVID-19  23811                   44  0\n2        0 COVID-19  38232                   42  1\n3        0 COVID-19  19769                   41  1\n4        0 COVID-19  28486                   40  0\n5        0 COVID-19   6422                   39  0\n6        0 COVID-19   7907                   39  0\n\n\nepiworldR has a method to automatically plot the reproductive number. Thisfunction takes the average of values in the above table for each date and repeats until all date have been accounted for. For example, on average, individuals who acquired the virus on the 10th day transmit the virus to roughly 1.7 other individuals.\n\nCodex &lt;- plot(repnum, type=\"b\")"
  },
  {
    "objectID": "part1.html#exercise-1",
    "href": "part1.html#exercise-1",
    "title": "Part 1: Basic Modeling",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a SEIR model using the ModelSEIR() function (not ModelSEIRCONN()) to simulate a COVID-19 outbreak for 100 days in a population with:\n- prevalence = 0.01\n- transmission_rate = 0.9\n- recovery_rate = \\(\\frac{1}{4}\\)\n- incubation_days = 4\nThen plot the model parameters to analyze changes in counts over time. When running the model, set seed = 1912.\nTo accomplish this for a SEIR model, you will need to add the model to a smallworld population using the agents_smallworld() function after initializing the model. From there, run the model and visualize. Assume:\n- n = 10000\n- k = 5\n- d = FALSE\n- p = .01\nAfter how many days does the number of infections peak in this simulation? How many infections occur at the peak?"
  },
  {
    "objectID": "part1.html#exercise-2",
    "href": "part1.html#exercise-2",
    "title": "Part 1: Basic Modeling",
    "section": "Exercise 2",
    "text": "Exercise 2\nPlot the reproductive number of the COVID-19 simulated SEIR model over 100 days."
  },
  {
    "objectID": "part1.html#footnotes",
    "href": "part1.html#footnotes",
    "title": "Part 1: Basic Modeling",
    "section": "Footnotes",
    "text": "Footnotes\n\nThis feature is currently under development. The repository of epiworld contains a branch with this feature.↩︎"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "epiworldR Sunbelt 2023 Workshop",
    "section": "Footnotes",
    "text": "Footnotes\n\nPlease note that the online RStudio server and your data stored in it will be available for two weeks after the workshop. After that, the server will be shut down and all data will be deleted. If you would like to keep your data, please download it before the server is shut down.↩︎"
  }
]